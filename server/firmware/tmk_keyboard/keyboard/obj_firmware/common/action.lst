   1               		.file	"action.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.action_exec,"ax",@progbits
  11               	.global	action_exec
  13               	action_exec:
  14               	.LFB103:
  15               		.file 1 "../tmk_core/common/action.c"
   1:../tmk_core/common/action.c **** /*
   2:../tmk_core/common/action.c **** Copyright 2012,2013 Jun Wako <wakojun@gmail.com>
   3:../tmk_core/common/action.c **** 
   4:../tmk_core/common/action.c **** This program is free software: you can redistribute it and/or modify
   5:../tmk_core/common/action.c **** it under the terms of the GNU General Public License as published by
   6:../tmk_core/common/action.c **** the Free Software Foundation, either version 2 of the License, or
   7:../tmk_core/common/action.c **** (at your option) any later version.
   8:../tmk_core/common/action.c **** 
   9:../tmk_core/common/action.c **** This program is distributed in the hope that it will be useful,
  10:../tmk_core/common/action.c **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:../tmk_core/common/action.c **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:../tmk_core/common/action.c **** GNU General Public License for more details.
  13:../tmk_core/common/action.c **** 
  14:../tmk_core/common/action.c **** You should have received a copy of the GNU General Public License
  15:../tmk_core/common/action.c **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:../tmk_core/common/action.c **** */
  17:../tmk_core/common/action.c **** #include "host.h"
  18:../tmk_core/common/action.c **** #include "keycode.h"
  19:../tmk_core/common/action.c **** #include "keyboard.h"
  20:../tmk_core/common/action.c **** #include "mousekey.h"
  21:../tmk_core/common/action.c **** #include "command.h"
  22:../tmk_core/common/action.c **** #include "led.h"
  23:../tmk_core/common/action.c **** #include "backlight.h"
  24:../tmk_core/common/action.c **** #include "action_layer.h"
  25:../tmk_core/common/action.c **** #include "action_tapping.h"
  26:../tmk_core/common/action.c **** #include "action_macro.h"
  27:../tmk_core/common/action.c **** #include "action_util.h"
  28:../tmk_core/common/action.c **** #include "action.h"
  29:../tmk_core/common/action.c **** #include "hook.h"
  30:../tmk_core/common/action.c **** 
  31:../tmk_core/common/action.c **** #ifdef DEBUG_ACTION
  32:../tmk_core/common/action.c **** #include "debug.h"
  33:../tmk_core/common/action.c **** #else
  34:../tmk_core/common/action.c **** #include "nodebug.h"
  35:../tmk_core/common/action.c **** #endif
  36:../tmk_core/common/action.c **** 
  37:../tmk_core/common/action.c **** 
  38:../tmk_core/common/action.c **** void action_exec(keyevent_t event)
  39:../tmk_core/common/action.c **** {
  16               		.loc 1 39 0
  17               		.cfi_startproc
  18 0000 CF93      		push r28
  19               	.LCFI0:
  20               		.cfi_def_cfa_offset 3
  21               		.cfi_offset 28, -2
  22 0002 DF93      		push r29
  23               	.LCFI1:
  24               		.cfi_def_cfa_offset 4
  25               		.cfi_offset 29, -3
  26 0004 CDB7      		in r28,__SP_L__
  27 0006 DEB7      		in r29,__SP_H__
  28               	.LCFI2:
  29               		.cfi_def_cfa_register 28
  30 0008 2B97      		sbiw r28,11
  31               	.LCFI3:
  32               		.cfi_def_cfa_offset 15
  33 000a 0FB6      		in __tmp_reg__,__SREG__
  34 000c F894      		cli
  35 000e DEBF      		out __SP_H__,r29
  36 0010 0FBE      		out __SREG__,__tmp_reg__
  37 0012 CDBF      		out __SP_L__,r28
  38               	/* prologue: function */
  39               	/* frame size = 11 */
  40               	/* stack size = 13 */
  41               	.L__stack_usage = 13
  42 0014 942F      		mov r25,r20
  43 0016 4F83      		std Y+7,r20
  44 0018 252F      		mov r18,r21
  45 001a 5887      		std Y+8,r21
  46 001c 6987      		std Y+9,r22
  47 001e 7A87      		std Y+10,r23
  48 0020 8B87      		std Y+11,r24
  49               	.LVL0:
  50               	.LBB4:
  51               	.LBB5:
  52               		.file 2 "../tmk_core/common/keyboard.h"
   1:../tmk_core/common/keyboard.h **** /*
   2:../tmk_core/common/keyboard.h **** Copyright 2011,2012,2013 Jun Wako <wakojun@gmail.com>
   3:../tmk_core/common/keyboard.h **** 
   4:../tmk_core/common/keyboard.h **** This program is free software: you can redistribute it and/or modify
   5:../tmk_core/common/keyboard.h **** it under the terms of the GNU General Public License as published by
   6:../tmk_core/common/keyboard.h **** the Free Software Foundation, either version 2 of the License, or
   7:../tmk_core/common/keyboard.h **** (at your option) any later version.
   8:../tmk_core/common/keyboard.h **** 
   9:../tmk_core/common/keyboard.h **** This program is distributed in the hope that it will be useful,
  10:../tmk_core/common/keyboard.h **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:../tmk_core/common/keyboard.h **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:../tmk_core/common/keyboard.h **** GNU General Public License for more details.
  13:../tmk_core/common/keyboard.h **** 
  14:../tmk_core/common/keyboard.h **** You should have received a copy of the GNU General Public License
  15:../tmk_core/common/keyboard.h **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:../tmk_core/common/keyboard.h **** */
  17:../tmk_core/common/keyboard.h **** 
  18:../tmk_core/common/keyboard.h **** #ifndef KEYBOARD_H
  19:../tmk_core/common/keyboard.h **** #define KEYBOARD_H
  20:../tmk_core/common/keyboard.h **** 
  21:../tmk_core/common/keyboard.h **** #include <stdbool.h>
  22:../tmk_core/common/keyboard.h **** #include <stdint.h>
  23:../tmk_core/common/keyboard.h **** 
  24:../tmk_core/common/keyboard.h **** 
  25:../tmk_core/common/keyboard.h **** #ifdef __cplusplus
  26:../tmk_core/common/keyboard.h **** extern "C" {
  27:../tmk_core/common/keyboard.h **** #endif
  28:../tmk_core/common/keyboard.h **** 
  29:../tmk_core/common/keyboard.h **** /* key matrix position */
  30:../tmk_core/common/keyboard.h **** typedef struct {
  31:../tmk_core/common/keyboard.h ****     uint8_t col;
  32:../tmk_core/common/keyboard.h ****     uint8_t row;
  33:../tmk_core/common/keyboard.h **** } keypos_t;
  34:../tmk_core/common/keyboard.h **** 
  35:../tmk_core/common/keyboard.h **** /* key event */
  36:../tmk_core/common/keyboard.h **** typedef struct {
  37:../tmk_core/common/keyboard.h ****     keypos_t key;
  38:../tmk_core/common/keyboard.h ****     bool     pressed;
  39:../tmk_core/common/keyboard.h ****     uint16_t time;
  40:../tmk_core/common/keyboard.h **** } keyevent_t;
  41:../tmk_core/common/keyboard.h **** 
  42:../tmk_core/common/keyboard.h **** /* equivalent test of keypos_t */
  43:../tmk_core/common/keyboard.h **** #define KEYEQ(keya, keyb)       ((keya).row == (keyb).row && (keya).col == (keyb).col)
  44:../tmk_core/common/keyboard.h **** 
  45:../tmk_core/common/keyboard.h **** /* Rules for No Event:
  46:../tmk_core/common/keyboard.h ****  * 1) (time == 0) to handle (keyevent_t){} as empty event
  47:../tmk_core/common/keyboard.h ****  * 2) Matrix(255, 255) to make TICK event available
  48:../tmk_core/common/keyboard.h ****  */
  49:../tmk_core/common/keyboard.h **** static inline bool IS_NOEVENT(keyevent_t event) { return event.time == 0 || (event.key.row == 255 &
  53               		.loc 2 49 0
  54 0022 4A85      		ldd r20,Y+10
  55 0024 5B85      		ldd r21,Y+11
  56               	.LVL1:
  57 0026 452B      		or r20,r21
  58 0028 01F0      		breq .L2
  59 002a 2F3F      		cpi r18,lo8(-1)
  60 002c 01F4      		brne .L3
  61 002e 9F3F      		cpi r25,lo8(-1)
  62 0030 01F4      		brne .L3
  63               	.LVL2:
  64               	.L2:
  65               	.LBE5:
  66               	.LBE4:
  40:../tmk_core/common/action.c ****     if (!IS_NOEVENT(event)) {
  41:../tmk_core/common/action.c ****         dprint("\n---- action_exec: start -----\n");
  42:../tmk_core/common/action.c ****         dprint("EVENT: "); debug_event(event); dprintln();
  43:../tmk_core/common/action.c ****         hook_matrix_change(event);
  44:../tmk_core/common/action.c ****     }
  45:../tmk_core/common/action.c **** 
  46:../tmk_core/common/action.c ****     keyrecord_t record = { .event = event };
  67               		.loc 1 46 0
  68 0032 DE01      		movw r26,r28
  69 0034 1196      		adiw r26,1
  70 0036 86E0      		ldi r24,lo8(6)
  71 0038 FD01      		movw r30,r26
  72               		0:
  73 003a 1192      		st Z+,__zero_reg__
  74 003c 8A95      		dec r24
  75 003e 01F4      		brne 0b
  76 0040 85E0      		ldi r24,lo8(5)
  77 0042 FE01      		movw r30,r28
  78 0044 3796      		adiw r30,7
  79               		0:
  80 0046 0190      		ld r0,Z+
  81 0048 0D92      		st X+,r0
  82 004a 8A95      		dec r24
  83 004c 01F4      		brne 0b
  47:../tmk_core/common/action.c **** 
  48:../tmk_core/common/action.c **** #ifndef NO_ACTION_TAPPING
  49:../tmk_core/common/action.c ****     action_tapping_process(record);
  84               		.loc 1 49 0
  85 004e 4981      		ldd r20,Y+1
  86 0050 5A81      		ldd r21,Y+2
  87 0052 6B81      		ldd r22,Y+3
  88 0054 7C81      		ldd r23,Y+4
  89 0056 8D81      		ldd r24,Y+5
  90 0058 9E81      		ldd r25,Y+6
  91 005a 0E94 0000 		call action_tapping_process
  92               	.LVL3:
  93               	/* epilogue start */
  50:../tmk_core/common/action.c **** #else
  51:../tmk_core/common/action.c ****     process_action(&record);
  52:../tmk_core/common/action.c ****     if (!IS_NOEVENT(record.event)) {
  53:../tmk_core/common/action.c ****         dprint("processed: "); debug_record(record); dprintln();
  54:../tmk_core/common/action.c ****     }
  55:../tmk_core/common/action.c **** #endif
  56:../tmk_core/common/action.c **** }
  94               		.loc 1 56 0
  95 005e 2B96      		adiw r28,11
  96 0060 0FB6      		in __tmp_reg__,__SREG__
  97 0062 F894      		cli
  98 0064 DEBF      		out __SP_H__,r29
  99 0066 0FBE      		out __SREG__,__tmp_reg__
 100 0068 CDBF      		out __SP_L__,r28
 101 006a DF91      		pop r29
 102 006c CF91      		pop r28
 103 006e 0895      		ret
 104               	.LVL4:
 105               	.L3:
  43:../tmk_core/common/action.c ****     }
 106               		.loc 1 43 0
 107 0070 4F81      		ldd r20,Y+7
 108               	.LVL5:
 109 0072 5885      		ldd r21,Y+8
 110 0074 6985      		ldd r22,Y+9
 111 0076 7A85      		ldd r23,Y+10
 112 0078 8B85      		ldd r24,Y+11
 113 007a 0E94 0000 		call hook_matrix_change
 114               	.LVL6:
 115 007e 00C0      		rjmp .L2
 116               		.cfi_endproc
 117               	.LFE103:
 119               		.section	.text.register_code,"ax",@progbits
 120               	.global	register_code
 122               	register_code:
 123               	.LFB105:
  57:../tmk_core/common/action.c **** 
  58:../tmk_core/common/action.c **** void process_action(keyrecord_t *record)
  59:../tmk_core/common/action.c **** {
  60:../tmk_core/common/action.c ****     keyevent_t event = record->event;
  61:../tmk_core/common/action.c **** #ifndef NO_ACTION_TAPPING
  62:../tmk_core/common/action.c ****     uint8_t tap_count = record->tap.count;
  63:../tmk_core/common/action.c **** #endif
  64:../tmk_core/common/action.c **** 
  65:../tmk_core/common/action.c ****     if (IS_NOEVENT(event)) { return; }
  66:../tmk_core/common/action.c **** 
  67:../tmk_core/common/action.c ****     action_t action = layer_switch_get_action(event.key);
  68:../tmk_core/common/action.c ****     dprint("ACTION: "); debug_action(action);
  69:../tmk_core/common/action.c **** #ifndef NO_ACTION_LAYER
  70:../tmk_core/common/action.c ****     dprint(" layer_state: "); layer_debug();
  71:../tmk_core/common/action.c ****     dprint(" default_layer_state: "); default_layer_debug();
  72:../tmk_core/common/action.c **** #endif
  73:../tmk_core/common/action.c ****     dprintln();
  74:../tmk_core/common/action.c **** 
  75:../tmk_core/common/action.c ****     switch (action.kind.id) {
  76:../tmk_core/common/action.c ****         /* Key and Mods */
  77:../tmk_core/common/action.c ****         case ACT_LMODS:
  78:../tmk_core/common/action.c ****         case ACT_RMODS:
  79:../tmk_core/common/action.c ****             {
  80:../tmk_core/common/action.c ****                 uint8_t mods = (action.kind.id == ACT_LMODS) ?  action.key.mods :
  81:../tmk_core/common/action.c ****                                                                 action.key.mods<<4;
  82:../tmk_core/common/action.c ****                 if (event.pressed) {
  83:../tmk_core/common/action.c ****                     if (mods) {
  84:../tmk_core/common/action.c ****                         add_weak_mods(mods);
  85:../tmk_core/common/action.c ****                         send_keyboard_report();
  86:../tmk_core/common/action.c ****                     }
  87:../tmk_core/common/action.c ****                     register_code(action.key.code);
  88:../tmk_core/common/action.c ****                 } else {
  89:../tmk_core/common/action.c ****                     unregister_code(action.key.code);
  90:../tmk_core/common/action.c ****                     if (mods) {
  91:../tmk_core/common/action.c ****                         del_weak_mods(mods);
  92:../tmk_core/common/action.c ****                         send_keyboard_report();
  93:../tmk_core/common/action.c ****                     }
  94:../tmk_core/common/action.c ****                 }
  95:../tmk_core/common/action.c ****             }
  96:../tmk_core/common/action.c ****             break;
  97:../tmk_core/common/action.c **** #ifndef NO_ACTION_TAPPING
  98:../tmk_core/common/action.c ****         case ACT_LMODS_TAP:
  99:../tmk_core/common/action.c ****         case ACT_RMODS_TAP:
 100:../tmk_core/common/action.c ****             {
 101:../tmk_core/common/action.c ****                 uint8_t mods = (action.kind.id == ACT_LMODS_TAP) ?  action.key.mods :
 102:../tmk_core/common/action.c ****                                                                     action.key.mods<<4;
 103:../tmk_core/common/action.c ****                 switch (action.layer_tap.code) {
 104:../tmk_core/common/action.c ****     #ifndef NO_ACTION_ONESHOT
 105:../tmk_core/common/action.c ****                     case MODS_ONESHOT:
 106:../tmk_core/common/action.c ****                         // Oneshot modifier
 107:../tmk_core/common/action.c ****                         if (event.pressed) {
 108:../tmk_core/common/action.c ****                             if (tap_count == 0) {
 109:../tmk_core/common/action.c ****                                 register_mods(mods);
 110:../tmk_core/common/action.c ****                             }
 111:../tmk_core/common/action.c ****                             else if (tap_count == 1) {
 112:../tmk_core/common/action.c ****                                 dprint("MODS_TAP: Oneshot: start\n");
 113:../tmk_core/common/action.c ****                                 set_oneshot_mods(mods);
 114:../tmk_core/common/action.c ****                             }
 115:../tmk_core/common/action.c ****                             else {
 116:../tmk_core/common/action.c ****                                 register_mods(mods);
 117:../tmk_core/common/action.c ****                             }
 118:../tmk_core/common/action.c ****                         } else {
 119:../tmk_core/common/action.c ****                             if (tap_count == 0) {
 120:../tmk_core/common/action.c ****                                 clear_oneshot_mods();
 121:../tmk_core/common/action.c ****                                 unregister_mods(mods);
 122:../tmk_core/common/action.c ****                             }
 123:../tmk_core/common/action.c ****                             else if (tap_count == 1) {
 124:../tmk_core/common/action.c ****                                 // Retain Oneshot mods
 125:../tmk_core/common/action.c ****                             }
 126:../tmk_core/common/action.c ****                             else {
 127:../tmk_core/common/action.c ****                                 clear_oneshot_mods();
 128:../tmk_core/common/action.c ****                                 unregister_mods(mods);
 129:../tmk_core/common/action.c ****                             }
 130:../tmk_core/common/action.c ****                         }
 131:../tmk_core/common/action.c ****                         break;
 132:../tmk_core/common/action.c ****     #endif
 133:../tmk_core/common/action.c ****                     case MODS_TAP_TOGGLE:
 134:../tmk_core/common/action.c ****                         if (event.pressed) {
 135:../tmk_core/common/action.c ****                             if (tap_count <= TAPPING_TOGGLE) {
 136:../tmk_core/common/action.c ****                                 if (mods & get_mods()) {
 137:../tmk_core/common/action.c ****                                     dprint("MODS_TAP_TOGGLE: toggle mods off\n");
 138:../tmk_core/common/action.c ****                                     unregister_mods(mods);
 139:../tmk_core/common/action.c ****                                 } else {
 140:../tmk_core/common/action.c ****                                     dprint("MODS_TAP_TOGGLE: toggle mods on\n");
 141:../tmk_core/common/action.c ****                                     register_mods(mods);
 142:../tmk_core/common/action.c ****                                 }
 143:../tmk_core/common/action.c ****                             }
 144:../tmk_core/common/action.c ****                         } else {
 145:../tmk_core/common/action.c ****                             if (tap_count < TAPPING_TOGGLE) {
 146:../tmk_core/common/action.c ****                                 dprint("MODS_TAP_TOGGLE: release : unregister_mods\n");
 147:../tmk_core/common/action.c ****                                 unregister_mods(mods);
 148:../tmk_core/common/action.c ****                             }
 149:../tmk_core/common/action.c ****                         }
 150:../tmk_core/common/action.c ****                         break;
 151:../tmk_core/common/action.c ****                     default:
 152:../tmk_core/common/action.c ****                         if (event.pressed) {
 153:../tmk_core/common/action.c ****                             if (tap_count > 0) {
 154:../tmk_core/common/action.c ****                                 if (record->tap.interrupted) {
 155:../tmk_core/common/action.c ****                                     dprint("MODS_TAP: Tap: Cancel: add_mods\n");
 156:../tmk_core/common/action.c ****                                     // ad hoc: set 0 to cancel tap
 157:../tmk_core/common/action.c ****                                     record->tap.count = 0;
 158:../tmk_core/common/action.c ****                                     register_mods(mods);
 159:../tmk_core/common/action.c ****                                 } else {
 160:../tmk_core/common/action.c ****                                     dprint("MODS_TAP: Tap: register_code\n");
 161:../tmk_core/common/action.c ****                                     register_code(action.key.code);
 162:../tmk_core/common/action.c ****                                 }
 163:../tmk_core/common/action.c ****                             } else {
 164:../tmk_core/common/action.c ****                                 dprint("MODS_TAP: No tap: add_mods\n");
 165:../tmk_core/common/action.c ****                                 register_mods(mods);
 166:../tmk_core/common/action.c ****                             }
 167:../tmk_core/common/action.c ****                         } else {
 168:../tmk_core/common/action.c ****                             if (tap_count > 0) {
 169:../tmk_core/common/action.c ****                                 dprint("MODS_TAP: Tap: unregister_code\n");
 170:../tmk_core/common/action.c ****                                 unregister_code(action.key.code);
 171:../tmk_core/common/action.c ****                             } else {
 172:../tmk_core/common/action.c ****                                 dprint("MODS_TAP: No tap: add_mods\n");
 173:../tmk_core/common/action.c ****                                 unregister_mods(mods);
 174:../tmk_core/common/action.c ****                             }
 175:../tmk_core/common/action.c ****                         }
 176:../tmk_core/common/action.c ****                         break;
 177:../tmk_core/common/action.c ****                 }
 178:../tmk_core/common/action.c ****             }
 179:../tmk_core/common/action.c ****             break;
 180:../tmk_core/common/action.c **** #endif
 181:../tmk_core/common/action.c **** #ifdef EXTRAKEY_ENABLE
 182:../tmk_core/common/action.c ****         /* other HID usage */
 183:../tmk_core/common/action.c ****         case ACT_USAGE:
 184:../tmk_core/common/action.c ****             switch (action.usage.page) {
 185:../tmk_core/common/action.c ****                 case PAGE_SYSTEM:
 186:../tmk_core/common/action.c ****                     if (event.pressed) {
 187:../tmk_core/common/action.c ****                         host_system_send(action.usage.code);
 188:../tmk_core/common/action.c ****                     } else {
 189:../tmk_core/common/action.c ****                         host_system_send(0);
 190:../tmk_core/common/action.c ****                     }
 191:../tmk_core/common/action.c ****                     break;
 192:../tmk_core/common/action.c ****                 case PAGE_CONSUMER:
 193:../tmk_core/common/action.c ****                     if (event.pressed) {
 194:../tmk_core/common/action.c ****                         host_consumer_send(action.usage.code);
 195:../tmk_core/common/action.c ****                     } else {
 196:../tmk_core/common/action.c ****                         host_consumer_send(0);
 197:../tmk_core/common/action.c ****                     }
 198:../tmk_core/common/action.c ****                     break;
 199:../tmk_core/common/action.c ****             }
 200:../tmk_core/common/action.c ****             break;
 201:../tmk_core/common/action.c **** #endif
 202:../tmk_core/common/action.c **** #ifdef MOUSEKEY_ENABLE
 203:../tmk_core/common/action.c ****         /* Mouse key */
 204:../tmk_core/common/action.c ****         case ACT_MOUSEKEY:
 205:../tmk_core/common/action.c ****             if (event.pressed) {
 206:../tmk_core/common/action.c ****                 mousekey_on(action.key.code);
 207:../tmk_core/common/action.c ****                 mousekey_send();
 208:../tmk_core/common/action.c ****             } else {
 209:../tmk_core/common/action.c ****                 mousekey_off(action.key.code);
 210:../tmk_core/common/action.c ****                 mousekey_send();
 211:../tmk_core/common/action.c ****             }
 212:../tmk_core/common/action.c ****             break;
 213:../tmk_core/common/action.c **** #endif
 214:../tmk_core/common/action.c **** #ifndef NO_ACTION_LAYER
 215:../tmk_core/common/action.c ****         case ACT_LAYER:
 216:../tmk_core/common/action.c ****             if (action.layer_bitop.on == 0) {
 217:../tmk_core/common/action.c ****                 /* Default Layer Bitwise Operation */
 218:../tmk_core/common/action.c ****                 if (!event.pressed) {
 219:../tmk_core/common/action.c ****                     uint8_t shift = action.layer_bitop.part*4;
 220:../tmk_core/common/action.c ****                     uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
 221:../tmk_core/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 222:../tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 223:../tmk_core/common/action.c ****                         case OP_BIT_AND: default_layer_and(bits | mask); break;
 224:../tmk_core/common/action.c ****                         case OP_BIT_OR:  default_layer_or(bits | mask);  break;
 225:../tmk_core/common/action.c ****                         case OP_BIT_XOR: default_layer_xor(bits | mask); break;
 226:../tmk_core/common/action.c ****                         case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
 227:../tmk_core/common/action.c ****                     }
 228:../tmk_core/common/action.c ****                 }
 229:../tmk_core/common/action.c ****             } else {
 230:../tmk_core/common/action.c ****                 /* Layer Bitwise Operation */
 231:../tmk_core/common/action.c ****                 if (event.pressed ? (action.layer_bitop.on & ON_PRESS) :
 232:../tmk_core/common/action.c ****                                     (action.layer_bitop.on & ON_RELEASE)) {
 233:../tmk_core/common/action.c ****                     uint8_t shift = action.layer_bitop.part*4;
 234:../tmk_core/common/action.c ****                     uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
 235:../tmk_core/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 236:../tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 237:../tmk_core/common/action.c ****                         case OP_BIT_AND: layer_and(bits | mask); break;
 238:../tmk_core/common/action.c ****                         case OP_BIT_OR:  layer_or(bits | mask);  break;
 239:../tmk_core/common/action.c ****                         case OP_BIT_XOR: layer_xor(bits | mask); break;
 240:../tmk_core/common/action.c ****                         case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
 241:../tmk_core/common/action.c ****                     }
 242:../tmk_core/common/action.c ****                 }
 243:../tmk_core/common/action.c ****             }
 244:../tmk_core/common/action.c ****             break;
 245:../tmk_core/common/action.c ****     #ifndef NO_ACTION_TAPPING
 246:../tmk_core/common/action.c ****         case ACT_LAYER_TAP:
 247:../tmk_core/common/action.c ****         case ACT_LAYER_TAP_EXT:
 248:../tmk_core/common/action.c ****             switch (action.layer_tap.code) {
 249:../tmk_core/common/action.c ****                 case 0xe0 ... 0xef:
 250:../tmk_core/common/action.c ****                     /* layer On/Off with modifiers(left only) */
 251:../tmk_core/common/action.c ****                     if (event.pressed) {
 252:../tmk_core/common/action.c ****                         layer_on(action.layer_tap.val);
 253:../tmk_core/common/action.c ****                         register_mods(action.layer_tap.code & 0x0f);
 254:../tmk_core/common/action.c ****                     } else {
 255:../tmk_core/common/action.c ****                         layer_off(action.layer_tap.val);
 256:../tmk_core/common/action.c ****                         unregister_mods(action.layer_tap.code & 0x0f);
 257:../tmk_core/common/action.c ****                     }
 258:../tmk_core/common/action.c ****                     break;
 259:../tmk_core/common/action.c ****                 case OP_TAP_TOGGLE:
 260:../tmk_core/common/action.c ****                     /* tap toggle */
 261:../tmk_core/common/action.c ****                     if (event.pressed) {
 262:../tmk_core/common/action.c ****                         if (tap_count < TAPPING_TOGGLE) {
 263:../tmk_core/common/action.c ****                             layer_invert(action.layer_tap.val);
 264:../tmk_core/common/action.c ****                         }
 265:../tmk_core/common/action.c ****                     } else {
 266:../tmk_core/common/action.c ****                         if (tap_count <= TAPPING_TOGGLE) {
 267:../tmk_core/common/action.c ****                             layer_invert(action.layer_tap.val);
 268:../tmk_core/common/action.c ****                         }
 269:../tmk_core/common/action.c ****                     }
 270:../tmk_core/common/action.c ****                     break;
 271:../tmk_core/common/action.c ****                 case OP_ON_OFF:
 272:../tmk_core/common/action.c ****                     event.pressed ? layer_on(action.layer_tap.val) :
 273:../tmk_core/common/action.c ****                                     layer_off(action.layer_tap.val);
 274:../tmk_core/common/action.c ****                     break;
 275:../tmk_core/common/action.c ****                 case OP_OFF_ON:
 276:../tmk_core/common/action.c ****                     event.pressed ? layer_off(action.layer_tap.val) :
 277:../tmk_core/common/action.c ****                                     layer_on(action.layer_tap.val);
 278:../tmk_core/common/action.c ****                     break;
 279:../tmk_core/common/action.c ****                 case OP_SET_CLEAR:
 280:../tmk_core/common/action.c ****                     event.pressed ? layer_move(action.layer_tap.val) :
 281:../tmk_core/common/action.c ****                                     layer_clear();
 282:../tmk_core/common/action.c ****                     break;
 283:../tmk_core/common/action.c ****                 default:
 284:../tmk_core/common/action.c ****                     /* tap key */
 285:../tmk_core/common/action.c ****                     if (event.pressed) {
 286:../tmk_core/common/action.c ****                         if (tap_count > 0) {
 287:../tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: Tap: register_code\n");
 288:../tmk_core/common/action.c ****                             register_code(action.layer_tap.code);
 289:../tmk_core/common/action.c ****                         } else {
 290:../tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: No tap: On on press\n");
 291:../tmk_core/common/action.c ****                             layer_on(action.layer_tap.val);
 292:../tmk_core/common/action.c ****                         }
 293:../tmk_core/common/action.c ****                     } else {
 294:../tmk_core/common/action.c ****                         if (tap_count > 0) {
 295:../tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: Tap: unregister_code\n");
 296:../tmk_core/common/action.c ****                             unregister_code(action.layer_tap.code);
 297:../tmk_core/common/action.c ****                         } else {
 298:../tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: No tap: Off on release\n");
 299:../tmk_core/common/action.c ****                             layer_off(action.layer_tap.val);
 300:../tmk_core/common/action.c ****                         }
 301:../tmk_core/common/action.c ****                     }
 302:../tmk_core/common/action.c ****                     break;
 303:../tmk_core/common/action.c ****             }
 304:../tmk_core/common/action.c ****             break;
 305:../tmk_core/common/action.c ****     #endif
 306:../tmk_core/common/action.c **** #endif
 307:../tmk_core/common/action.c ****         /* Extentions */
 308:../tmk_core/common/action.c **** #ifndef NO_ACTION_MACRO
 309:../tmk_core/common/action.c ****         case ACT_MACRO:
 310:../tmk_core/common/action.c ****             action_macro_play(action_get_macro(record, action.func.id, action.func.opt));
 311:../tmk_core/common/action.c ****             break;
 312:../tmk_core/common/action.c **** #endif
 313:../tmk_core/common/action.c **** #ifdef BACKLIGHT_ENABLE
 314:../tmk_core/common/action.c ****         case ACT_BACKLIGHT:
 315:../tmk_core/common/action.c ****             if (!event.pressed) {
 316:../tmk_core/common/action.c ****                 switch (action.backlight.opt) {
 317:../tmk_core/common/action.c ****                     case BACKLIGHT_INCREASE:
 318:../tmk_core/common/action.c ****                         backlight_increase();
 319:../tmk_core/common/action.c ****                         break;
 320:../tmk_core/common/action.c ****                     case BACKLIGHT_DECREASE:
 321:../tmk_core/common/action.c ****                         backlight_decrease();
 322:../tmk_core/common/action.c ****                         break;
 323:../tmk_core/common/action.c ****                     case BACKLIGHT_TOGGLE:
 324:../tmk_core/common/action.c ****                         backlight_toggle();
 325:../tmk_core/common/action.c ****                         break;
 326:../tmk_core/common/action.c ****                     case BACKLIGHT_STEP:
 327:../tmk_core/common/action.c ****                         backlight_step();
 328:../tmk_core/common/action.c ****                         break;
 329:../tmk_core/common/action.c ****                     case BACKLIGHT_LEVEL:
 330:../tmk_core/common/action.c ****                         backlight_level(action.backlight.level);
 331:../tmk_core/common/action.c ****                         break;
 332:../tmk_core/common/action.c ****                 }
 333:../tmk_core/common/action.c ****             }
 334:../tmk_core/common/action.c ****             break;
 335:../tmk_core/common/action.c **** #endif
 336:../tmk_core/common/action.c ****         case ACT_COMMAND:
 337:../tmk_core/common/action.c ****             break;
 338:../tmk_core/common/action.c **** #ifndef NO_ACTION_FUNCTION
 339:../tmk_core/common/action.c ****         case ACT_FUNCTION:
 340:../tmk_core/common/action.c ****             action_function(record, action.func.id, action.func.opt);
 341:../tmk_core/common/action.c ****             break;
 342:../tmk_core/common/action.c **** #endif
 343:../tmk_core/common/action.c ****         default:
 344:../tmk_core/common/action.c ****             break;
 345:../tmk_core/common/action.c ****     }
 346:../tmk_core/common/action.c **** }
 347:../tmk_core/common/action.c **** 
 348:../tmk_core/common/action.c **** 
 349:../tmk_core/common/action.c **** 
 350:../tmk_core/common/action.c **** 
 351:../tmk_core/common/action.c **** /*
 352:../tmk_core/common/action.c ****  * Utilities for actions.
 353:../tmk_core/common/action.c ****  */
 354:../tmk_core/common/action.c **** void register_code(uint8_t code)
 355:../tmk_core/common/action.c **** {
 124               		.loc 1 355 0
 125               		.cfi_startproc
 126               	.LVL7:
 127 0000 CF93      		push r28
 128               	.LCFI4:
 129               		.cfi_def_cfa_offset 3
 130               		.cfi_offset 28, -2
 131               	/* prologue: function */
 132               	/* frame size = 0 */
 133               	/* stack size = 1 */
 134               	.L__stack_usage = 1
 356:../tmk_core/common/action.c ****     if (code == KC_NO) {
 135               		.loc 1 356 0
 136 0002 8823      		tst r24
 137 0004 01F4      		brne .+2
 138 0006 00C0      		rjmp .L9
 139 0008 C82F      		mov r28,r24
 357:../tmk_core/common/action.c ****         return;
 358:../tmk_core/common/action.c ****     }
 359:../tmk_core/common/action.c **** 
 360:../tmk_core/common/action.c **** #ifdef LOCKING_SUPPORT_ENABLE
 361:../tmk_core/common/action.c ****     else if (KC_LOCKING_CAPS == code) {
 140               		.loc 1 361 0
 141 000a 8238      		cpi r24,lo8(-126)
 142 000c 01F4      		brne .L12
 362:../tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 363:../tmk_core/common/action.c ****         // Resync: ignore if caps lock already is on
 364:../tmk_core/common/action.c ****         if (host_keyboard_leds() & (1<<USB_LED_CAPS_LOCK)) return;
 143               		.loc 1 364 0
 144 000e 0E94 0000 		call host_keyboard_leds
 145               	.LVL8:
 146 0012 81FD      		sbrc r24,1
 147 0014 00C0      		rjmp .L9
 365:../tmk_core/common/action.c **** #endif
 366:../tmk_core/common/action.c ****         add_key(KC_CAPSLOCK);
 148               		.loc 1 366 0
 149 0016 89E3      		ldi r24,lo8(57)
 150 0018 0E94 0000 		call add_key
 151               	.LVL9:
 367:../tmk_core/common/action.c ****         send_keyboard_report();
 152               		.loc 1 367 0
 153 001c 0E94 0000 		call send_keyboard_report
 154               	.LVL10:
 368:../tmk_core/common/action.c ****         del_key(KC_CAPSLOCK);
 155               		.loc 1 368 0
 156 0020 89E3      		ldi r24,lo8(57)
 157 0022 00C0      		rjmp .L44
 158               	.LVL11:
 159               	.L12:
 369:../tmk_core/common/action.c ****         send_keyboard_report();
 370:../tmk_core/common/action.c ****     }
 371:../tmk_core/common/action.c **** 
 372:../tmk_core/common/action.c ****     else if (KC_LOCKING_NUM == code) {
 160               		.loc 1 372 0
 161 0024 8338      		cpi r24,lo8(-125)
 162 0026 01F4      		brne .L14
 373:../tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 374:../tmk_core/common/action.c ****         if (host_keyboard_leds() & (1<<USB_LED_NUM_LOCK)) return;
 163               		.loc 1 374 0
 164 0028 0E94 0000 		call host_keyboard_leds
 165               	.LVL12:
 166 002c 80FD      		sbrc r24,0
 167 002e 00C0      		rjmp .L9
 375:../tmk_core/common/action.c **** #endif
 376:../tmk_core/common/action.c ****         add_key(KC_NUMLOCK);
 168               		.loc 1 376 0
 169 0030 83E5      		ldi r24,lo8(83)
 170 0032 0E94 0000 		call add_key
 171               	.LVL13:
 377:../tmk_core/common/action.c ****         send_keyboard_report();
 172               		.loc 1 377 0
 173 0036 0E94 0000 		call send_keyboard_report
 174               	.LVL14:
 378:../tmk_core/common/action.c ****         del_key(KC_NUMLOCK);
 175               		.loc 1 378 0
 176 003a 83E5      		ldi r24,lo8(83)
 177               	.L44:
 178 003c 0E94 0000 		call del_key
 179               	.LVL15:
 180               	.L45:
 181               	/* epilogue start */
 379:../tmk_core/common/action.c ****         send_keyboard_report();
 380:../tmk_core/common/action.c ****     }
 381:../tmk_core/common/action.c **** 
 382:../tmk_core/common/action.c ****     else if (KC_LOCKING_SCROLL == code) {
 383:../tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 384:../tmk_core/common/action.c ****         if (host_keyboard_leds() & (1<<USB_LED_SCROLL_LOCK)) return;
 385:../tmk_core/common/action.c **** #endif
 386:../tmk_core/common/action.c ****         add_key(KC_SCROLLLOCK);
 387:../tmk_core/common/action.c ****         send_keyboard_report();
 388:../tmk_core/common/action.c ****         del_key(KC_SCROLLLOCK);
 389:../tmk_core/common/action.c ****         send_keyboard_report();
 390:../tmk_core/common/action.c ****     }
 391:../tmk_core/common/action.c **** #endif
 392:../tmk_core/common/action.c **** 
 393:../tmk_core/common/action.c ****     else if IS_KEY(code) {
 394:../tmk_core/common/action.c ****         // TODO: should push command_proc out of this block?
 395:../tmk_core/common/action.c ****         if (command_proc(code)) return;
 396:../tmk_core/common/action.c **** 
 397:../tmk_core/common/action.c **** #ifndef NO_ACTION_ONESHOT
 398:../tmk_core/common/action.c **** /* TODO: remove
 399:../tmk_core/common/action.c ****         if (oneshot_state.mods && !oneshot_state.disabled) {
 400:../tmk_core/common/action.c ****             uint8_t tmp_mods = get_mods();
 401:../tmk_core/common/action.c ****             add_mods(oneshot_state.mods);
 402:../tmk_core/common/action.c **** 
 403:../tmk_core/common/action.c ****             add_key(code);
 404:../tmk_core/common/action.c ****             send_keyboard_report();
 405:../tmk_core/common/action.c **** 
 406:../tmk_core/common/action.c ****             set_mods(tmp_mods);
 407:../tmk_core/common/action.c ****             send_keyboard_report();
 408:../tmk_core/common/action.c ****             oneshot_cancel();
 409:../tmk_core/common/action.c ****         } else 
 410:../tmk_core/common/action.c **** */
 411:../tmk_core/common/action.c **** #endif
 412:../tmk_core/common/action.c ****         {
 413:../tmk_core/common/action.c ****             add_key(code);
 414:../tmk_core/common/action.c ****             send_keyboard_report();
 415:../tmk_core/common/action.c ****         }
 416:../tmk_core/common/action.c ****     }
 417:../tmk_core/common/action.c ****     else if IS_MOD(code) {
 418:../tmk_core/common/action.c ****         add_mods(MOD_BIT(code));
 419:../tmk_core/common/action.c ****         send_keyboard_report();
 420:../tmk_core/common/action.c ****     }
 421:../tmk_core/common/action.c ****     else if IS_SYSTEM(code) {
 422:../tmk_core/common/action.c ****         host_system_send(KEYCODE2SYSTEM(code));
 423:../tmk_core/common/action.c ****     }
 424:../tmk_core/common/action.c ****     else if IS_CONSUMER(code) {
 425:../tmk_core/common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 426:../tmk_core/common/action.c ****     }
 427:../tmk_core/common/action.c **** }
 182               		.loc 1 427 0
 183 0040 CF91      		pop r28
 379:../tmk_core/common/action.c ****         send_keyboard_report();
 184               		.loc 1 379 0
 185 0042 0C94 0000 		jmp send_keyboard_report
 186               	.LVL16:
 187               	.L14:
 382:../tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 188               		.loc 1 382 0
 189 0046 8438      		cpi r24,lo8(-124)
 190 0048 01F4      		brne .L15
 384:../tmk_core/common/action.c **** #endif
 191               		.loc 1 384 0
 192 004a 0E94 0000 		call host_keyboard_leds
 193               	.LVL17:
 194 004e 82FD      		sbrc r24,2
 195 0050 00C0      		rjmp .L9
 386:../tmk_core/common/action.c ****         send_keyboard_report();
 196               		.loc 1 386 0
 197 0052 87E4      		ldi r24,lo8(71)
 198 0054 0E94 0000 		call add_key
 199               	.LVL18:
 387:../tmk_core/common/action.c ****         del_key(KC_SCROLLLOCK);
 200               		.loc 1 387 0
 201 0058 0E94 0000 		call send_keyboard_report
 202               	.LVL19:
 388:../tmk_core/common/action.c ****         send_keyboard_report();
 203               		.loc 1 388 0
 204 005c 87E4      		ldi r24,lo8(71)
 205 005e 00C0      		rjmp .L44
 206               	.LVL20:
 207               	.L15:
 393:../tmk_core/common/action.c ****         // TODO: should push command_proc out of this block?
 208               		.loc 1 393 0
 209 0060 8CEF      		ldi r24,lo8(-4)
 210               	.LVL21:
 211 0062 8C0F      		add r24,r28
 212 0064 813A      		cpi r24,lo8(-95)
 213 0066 00F4      		brsh .L16
 395:../tmk_core/common/action.c **** 
 214               		.loc 1 395 0
 215 0068 8C2F      		mov r24,r28
 216 006a 0E94 0000 		call command_proc
 217               	.LVL22:
 218 006e 8111      		cpse r24,__zero_reg__
 219 0070 00C0      		rjmp .L9
 413:../tmk_core/common/action.c ****             send_keyboard_report();
 220               		.loc 1 413 0
 221 0072 8C2F      		mov r24,r28
 222 0074 0E94 0000 		call add_key
 223               	.LVL23:
 224 0078 00C0      		rjmp .L45
 225               	.L16:
 417:../tmk_core/common/action.c ****         add_mods(MOD_BIT(code));
 226               		.loc 1 417 0
 227 007a 80E2      		ldi r24,lo8(32)
 228 007c 8C0F      		add r24,r28
 229 007e 8830      		cpi r24,lo8(8)
 230 0080 00F4      		brsh .L17
 418:../tmk_core/common/action.c ****         send_keyboard_report();
 231               		.loc 1 418 0
 232 0082 C770      		andi r28,lo8(7)
 233               	.LVL24:
 234 0084 81E0      		ldi r24,lo8(1)
 235 0086 00C0      		rjmp 2f
 236               		1:
 237 0088 880F      		lsl r24
 238               		2:
 239 008a CA95      		dec r28
 240 008c 02F4      		brpl 1b
 241 008e 0E94 0000 		call add_mods
 242               	.LVL25:
 243 0092 00C0      		rjmp .L45
 244               	.LVL26:
 245               	.L17:
 421:../tmk_core/common/action.c ****         host_system_send(KEYCODE2SYSTEM(code));
 246               		.loc 1 421 0
 247 0094 8BE5      		ldi r24,lo8(91)
 248 0096 8C0F      		add r24,r28
 249 0098 8330      		cpi r24,lo8(3)
 250 009a 00F4      		brsh .L18
 422:../tmk_core/common/action.c ****     }
 251               		.loc 1 422 0
 252 009c C53A      		cpi r28,lo8(-91)
 253 009e 01F0      		breq .L21
 422:../tmk_core/common/action.c ****     }
 254               		.loc 1 422 0 is_stmt 0 discriminator 1
 255 00a0 C63A      		cpi r28,lo8(-90)
 256 00a2 01F0      		breq .L22
 422:../tmk_core/common/action.c ****     }
 257               		.loc 1 422 0
 258 00a4 83E8      		ldi r24,lo8(-125)
 259 00a6 90E0      		ldi r25,0
 260 00a8 00C0      		rjmp .L19
 261               	.L21:
 262 00aa 81E8      		ldi r24,lo8(-127)
 263 00ac 90E0      		ldi r25,0
 264 00ae 00C0      		rjmp .L19
 265               	.L22:
 266 00b0 82E8      		ldi r24,lo8(-126)
 267 00b2 90E0      		ldi r25,0
 268               	.L19:
 269               	/* epilogue start */
 270               		.loc 1 427 0 is_stmt 1 discriminator 12
 271 00b4 CF91      		pop r28
 272               	.LVL27:
 422:../tmk_core/common/action.c ****     }
 273               		.loc 1 422 0 discriminator 12
 274 00b6 0C94 0000 		jmp host_system_send
 275               	.LVL28:
 276               	.L18:
 424:../tmk_core/common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 277               		.loc 1 424 0
 278 00ba 88E5      		ldi r24,lo8(88)
 279 00bc 8C0F      		add r24,r28
 280 00be 8531      		cpi r24,lo8(21)
 281 00c0 00F0      		brlo .+2
 282 00c2 00C0      		rjmp .L9
 425:../tmk_core/common/action.c ****     }
 283               		.loc 1 425 0
 284 00c4 C83A      		cpi r28,lo8(-88)
 285 00c6 01F0      		breq .L23
 425:../tmk_core/common/action.c ****     }
 286               		.loc 1 425 0 is_stmt 0 discriminator 1
 287 00c8 C93A      		cpi r28,lo8(-87)
 288 00ca 01F0      		breq .L24
 425:../tmk_core/common/action.c ****     }
 289               		.loc 1 425 0 discriminator 3
 290 00cc CA3A      		cpi r28,lo8(-86)
 291 00ce 01F0      		breq .L25
 425:../tmk_core/common/action.c ****     }
 292               		.loc 1 425 0 discriminator 5
 293 00d0 CB3A      		cpi r28,lo8(-85)
 294 00d2 01F0      		breq .L26
 425:../tmk_core/common/action.c ****     }
 295               		.loc 1 425 0 discriminator 7
 296 00d4 CC3A      		cpi r28,lo8(-84)
 297 00d6 01F0      		breq .L27
 425:../tmk_core/common/action.c ****     }
 298               		.loc 1 425 0 discriminator 9
 299 00d8 CD3A      		cpi r28,lo8(-83)
 300 00da 01F0      		breq .L28
 425:../tmk_core/common/action.c ****     }
 301               		.loc 1 425 0 discriminator 11
 302 00dc CE3A      		cpi r28,lo8(-82)
 303 00de 01F0      		breq .L29
 425:../tmk_core/common/action.c ****     }
 304               		.loc 1 425 0 discriminator 13
 305 00e0 CF3A      		cpi r28,lo8(-81)
 306 00e2 01F0      		breq .L30
 425:../tmk_core/common/action.c ****     }
 307               		.loc 1 425 0 discriminator 15
 308 00e4 C13B      		cpi r28,lo8(-79)
 309 00e6 01F0      		breq .L31
 425:../tmk_core/common/action.c ****     }
 310               		.loc 1 425 0 discriminator 17
 311 00e8 C03B      		cpi r28,lo8(-80)
 312 00ea 01F0      		breq .L32
 425:../tmk_core/common/action.c ****     }
 313               		.loc 1 425 0 discriminator 19
 314 00ec C23B      		cpi r28,lo8(-78)
 315 00ee 01F0      		breq .L33
 425:../tmk_core/common/action.c ****     }
 316               		.loc 1 425 0 discriminator 21
 317 00f0 C33B      		cpi r28,lo8(-77)
 318 00f2 01F0      		breq .L34
 425:../tmk_core/common/action.c ****     }
 319               		.loc 1 425 0 discriminator 23
 320 00f4 C43B      		cpi r28,lo8(-76)
 321 00f6 01F0      		breq .L35
 425:../tmk_core/common/action.c ****     }
 322               		.loc 1 425 0 discriminator 25
 323 00f8 C53B      		cpi r28,lo8(-75)
 324 00fa 01F0      		breq .L36
 425:../tmk_core/common/action.c ****     }
 325               		.loc 1 425 0 discriminator 27
 326 00fc C63B      		cpi r28,lo8(-74)
 327 00fe 01F0      		breq .L37
 425:../tmk_core/common/action.c ****     }
 328               		.loc 1 425 0 discriminator 29
 329 0100 C73B      		cpi r28,lo8(-73)
 330 0102 01F0      		breq .L38
 425:../tmk_core/common/action.c ****     }
 331               		.loc 1 425 0 discriminator 31
 332 0104 C83B      		cpi r28,lo8(-72)
 333 0106 01F0      		breq .L39
 425:../tmk_core/common/action.c ****     }
 334               		.loc 1 425 0 discriminator 33
 335 0108 C93B      		cpi r28,lo8(-71)
 336 010a 01F0      		breq .L40
 425:../tmk_core/common/action.c ****     }
 337               		.loc 1 425 0 discriminator 35
 338 010c CA3B      		cpi r28,lo8(-70)
 339 010e 01F0      		breq .L41
 425:../tmk_core/common/action.c ****     }
 340               		.loc 1 425 0 discriminator 37
 341 0110 CB3B      		cpi r28,lo8(-69)
 342 0112 01F0      		breq .L42
 425:../tmk_core/common/action.c ****     }
 343               		.loc 1 425 0 discriminator 39
 344 0114 CC3B      		cpi r28,lo8(-68)
 345 0116 01F4      		brne .+2
 346 0118 00C0      		rjmp .L43
 425:../tmk_core/common/action.c ****     }
 347               		.loc 1 425 0
 348 011a 80E0      		ldi r24,0
 349 011c 90E0      		ldi r25,0
 350 011e 00C0      		rjmp .L20
 351               	.L23:
 352 0120 82EE      		ldi r24,lo8(-30)
 353 0122 90E0      		ldi r25,0
 354 0124 00C0      		rjmp .L20
 355               	.L24:
 356 0126 89EE      		ldi r24,lo8(-23)
 357 0128 90E0      		ldi r25,0
 358 012a 00C0      		rjmp .L20
 359               	.L25:
 360 012c 8AEE      		ldi r24,lo8(-22)
 361 012e 90E0      		ldi r25,0
 362 0130 00C0      		rjmp .L20
 363               	.L26:
 364 0132 85EB      		ldi r24,lo8(-75)
 365 0134 90E0      		ldi r25,0
 366 0136 00C0      		rjmp .L20
 367               	.L27:
 368 0138 86EB      		ldi r24,lo8(-74)
 369 013a 90E0      		ldi r25,0
 370 013c 00C0      		rjmp .L20
 371               	.L28:
 372 013e 83EB      		ldi r24,lo8(-77)
 373 0140 90E0      		ldi r25,0
 374 0142 00C0      		rjmp .L20
 375               	.L29:
 376 0144 84EB      		ldi r24,lo8(-76)
 377 0146 90E0      		ldi r25,0
 378 0148 00C0      		rjmp .L20
 379               	.L30:
 380 014a 87EB      		ldi r24,lo8(-73)
 381 014c 90E0      		ldi r25,0
 382 014e 00C0      		rjmp .L20
 383               	.L31:
 384 0150 8CEC      		ldi r24,lo8(-52)
 385 0152 90E0      		ldi r25,0
 386 0154 00C0      		rjmp .L20
 387               	.L32:
 388 0156 8DEC      		ldi r24,lo8(-51)
 389 0158 90E0      		ldi r25,0
 390 015a 00C0      		rjmp .L20
 391               	.L33:
 392 015c 83E8      		ldi r24,lo8(-125)
 393 015e 91E0      		ldi r25,lo8(1)
 394 0160 00C0      		rjmp .L20
 395               	.L34:
 396 0162 8AE8      		ldi r24,lo8(-118)
 397 0164 91E0      		ldi r25,lo8(1)
 398 0166 00C0      		rjmp .L20
 399               	.L35:
 400 0168 82E9      		ldi r24,lo8(-110)
 401 016a 91E0      		ldi r25,lo8(1)
 402 016c 00C0      		rjmp .L20
 403               	.L36:
 404 016e 84E9      		ldi r24,lo8(-108)
 405 0170 91E0      		ldi r25,lo8(1)
 406 0172 00C0      		rjmp .L20
 407               	.L37:
 408 0174 81E2      		ldi r24,lo8(33)
 409 0176 92E0      		ldi r25,lo8(2)
 410 0178 00C0      		rjmp .L20
 411               	.L38:
 412 017a 83E2      		ldi r24,lo8(35)
 413 017c 92E0      		ldi r25,lo8(2)
 414 017e 00C0      		rjmp .L20
 415               	.L39:
 416 0180 84E2      		ldi r24,lo8(36)
 417 0182 92E0      		ldi r25,lo8(2)
 418 0184 00C0      		rjmp .L20
 419               	.L40:
 420 0186 85E2      		ldi r24,lo8(37)
 421 0188 92E0      		ldi r25,lo8(2)
 422 018a 00C0      		rjmp .L20
 423               	.L41:
 424 018c 86E2      		ldi r24,lo8(38)
 425 018e 92E0      		ldi r25,lo8(2)
 426 0190 00C0      		rjmp .L20
 427               	.L42:
 428 0192 87E2      		ldi r24,lo8(39)
 429 0194 92E0      		ldi r25,lo8(2)
 430 0196 00C0      		rjmp .L20
 431               	.L43:
 432 0198 8AE2      		ldi r24,lo8(42)
 433 019a 92E0      		ldi r25,lo8(2)
 434               	.L20:
 435               	/* epilogue start */
 436               		.loc 1 427 0 is_stmt 1 discriminator 84
 437 019c CF91      		pop r28
 438               	.LVL29:
 425:../tmk_core/common/action.c ****     }
 439               		.loc 1 425 0 discriminator 84
 440 019e 0C94 0000 		jmp host_consumer_send
 441               	.LVL30:
 442               	.L9:
 443               	/* epilogue start */
 444               		.loc 1 427 0
 445 01a2 CF91      		pop r28
 446 01a4 0895      		ret
 447               		.cfi_endproc
 448               	.LFE105:
 450               		.section	.text.unregister_code,"ax",@progbits
 451               	.global	unregister_code
 453               	unregister_code:
 454               	.LFB106:
 428:../tmk_core/common/action.c **** 
 429:../tmk_core/common/action.c **** void unregister_code(uint8_t code)
 430:../tmk_core/common/action.c **** {
 455               		.loc 1 430 0
 456               		.cfi_startproc
 457               	.LVL31:
 458               	/* prologue: function */
 459               	/* frame size = 0 */
 460               	/* stack size = 0 */
 461               	.L__stack_usage = 0
 431:../tmk_core/common/action.c ****     if (code == KC_NO) {
 462               		.loc 1 431 0
 463 0000 8823      		tst r24
 464 0002 01F4      		brne .+2
 465 0004 00C0      		rjmp .L46
 432:../tmk_core/common/action.c ****         return;
 433:../tmk_core/common/action.c ****     }
 434:../tmk_core/common/action.c **** 
 435:../tmk_core/common/action.c **** #ifdef LOCKING_SUPPORT_ENABLE
 436:../tmk_core/common/action.c ****     else if (KC_LOCKING_CAPS == code) {
 466               		.loc 1 436 0
 467 0006 8238      		cpi r24,lo8(-126)
 468 0008 01F4      		brne .L49
 437:../tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 438:../tmk_core/common/action.c ****         // Resync: ignore if caps lock already is off
 439:../tmk_core/common/action.c ****         if (!(host_keyboard_leds() & (1<<USB_LED_CAPS_LOCK))) return;
 469               		.loc 1 439 0
 470 000a 0E94 0000 		call host_keyboard_leds
 471               	.LVL32:
 472 000e 81FF      		sbrs r24,1
 473 0010 00C0      		rjmp .L46
 440:../tmk_core/common/action.c **** #endif
 441:../tmk_core/common/action.c ****         add_key(KC_CAPSLOCK);
 474               		.loc 1 441 0
 475 0012 89E3      		ldi r24,lo8(57)
 476 0014 0E94 0000 		call add_key
 477               	.LVL33:
 442:../tmk_core/common/action.c ****         send_keyboard_report();
 478               		.loc 1 442 0
 479 0018 0E94 0000 		call send_keyboard_report
 480               	.LVL34:
 443:../tmk_core/common/action.c ****         del_key(KC_CAPSLOCK);
 481               		.loc 1 443 0
 482 001c 89E3      		ldi r24,lo8(57)
 483 001e 00C0      		rjmp .L65
 484               	.LVL35:
 485               	.L49:
 444:../tmk_core/common/action.c ****         send_keyboard_report();
 445:../tmk_core/common/action.c ****     }
 446:../tmk_core/common/action.c **** 
 447:../tmk_core/common/action.c ****     else if (KC_LOCKING_NUM == code) {
 486               		.loc 1 447 0
 487 0020 8338      		cpi r24,lo8(-125)
 488 0022 01F4      		brne .L51
 448:../tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 449:../tmk_core/common/action.c ****         if (!(host_keyboard_leds() & (1<<USB_LED_NUM_LOCK))) return;
 489               		.loc 1 449 0
 490 0024 0E94 0000 		call host_keyboard_leds
 491               	.LVL36:
 492 0028 80FF      		sbrs r24,0
 493 002a 00C0      		rjmp .L46
 450:../tmk_core/common/action.c **** #endif
 451:../tmk_core/common/action.c ****         add_key(KC_NUMLOCK);
 494               		.loc 1 451 0
 495 002c 83E5      		ldi r24,lo8(83)
 496 002e 0E94 0000 		call add_key
 497               	.LVL37:
 452:../tmk_core/common/action.c ****         send_keyboard_report();
 498               		.loc 1 452 0
 499 0032 0E94 0000 		call send_keyboard_report
 500               	.LVL38:
 453:../tmk_core/common/action.c ****         del_key(KC_NUMLOCK);
 501               		.loc 1 453 0
 502 0036 83E5      		ldi r24,lo8(83)
 503               	.L65:
 504 0038 0E94 0000 		call del_key
 505               	.LVL39:
 506               	.L66:
 454:../tmk_core/common/action.c ****         send_keyboard_report();
 507               		.loc 1 454 0
 508 003c 0C94 0000 		jmp send_keyboard_report
 509               	.LVL40:
 510               	.L51:
 455:../tmk_core/common/action.c ****     }
 456:../tmk_core/common/action.c **** 
 457:../tmk_core/common/action.c ****     else if (KC_LOCKING_SCROLL == code) {
 511               		.loc 1 457 0
 512 0040 8438      		cpi r24,lo8(-124)
 513 0042 01F4      		brne .L52
 458:../tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 459:../tmk_core/common/action.c ****         if (!(host_keyboard_leds() & (1<<USB_LED_SCROLL_LOCK))) return;
 514               		.loc 1 459 0
 515 0044 0E94 0000 		call host_keyboard_leds
 516               	.LVL41:
 517 0048 82FF      		sbrs r24,2
 518 004a 00C0      		rjmp .L46
 460:../tmk_core/common/action.c **** #endif
 461:../tmk_core/common/action.c ****         add_key(KC_SCROLLLOCK);
 519               		.loc 1 461 0
 520 004c 87E4      		ldi r24,lo8(71)
 521 004e 0E94 0000 		call add_key
 522               	.LVL42:
 462:../tmk_core/common/action.c ****         send_keyboard_report();
 523               		.loc 1 462 0
 524 0052 0E94 0000 		call send_keyboard_report
 525               	.LVL43:
 463:../tmk_core/common/action.c ****         del_key(KC_SCROLLLOCK);
 526               		.loc 1 463 0
 527 0056 87E4      		ldi r24,lo8(71)
 528 0058 00C0      		rjmp .L65
 529               	.LVL44:
 530               	.L52:
 464:../tmk_core/common/action.c ****         send_keyboard_report();
 465:../tmk_core/common/action.c ****     }
 466:../tmk_core/common/action.c **** #endif
 467:../tmk_core/common/action.c **** 
 468:../tmk_core/common/action.c ****     else if IS_KEY(code) {
 531               		.loc 1 468 0
 532 005a 9CEF      		ldi r25,lo8(-4)
 533 005c 980F      		add r25,r24
 534 005e 913A      		cpi r25,lo8(-95)
 535 0060 00F0      		brlo .L65
 469:../tmk_core/common/action.c ****         del_key(code);
 470:../tmk_core/common/action.c ****         send_keyboard_report();
 471:../tmk_core/common/action.c ****     }
 472:../tmk_core/common/action.c ****     else if IS_MOD(code) {
 536               		.loc 1 472 0
 537 0062 90E2      		ldi r25,lo8(32)
 538 0064 980F      		add r25,r24
 539 0066 9830      		cpi r25,lo8(8)
 540 0068 00F4      		brsh .L54
 473:../tmk_core/common/action.c ****         del_mods(MOD_BIT(code));
 541               		.loc 1 473 0
 542 006a 8770      		andi r24,lo8(7)
 543               	.LVL45:
 544 006c 91E0      		ldi r25,lo8(1)
 545 006e 00C0      		rjmp 2f
 546               		1:
 547 0070 990F      		lsl r25
 548               		2:
 549 0072 8A95      		dec r24
 550 0074 02F4      		brpl 1b
 551 0076 892F      		mov r24,r25
 552 0078 0E94 0000 		call del_mods
 553               	.LVL46:
 554 007c 00C0      		rjmp .L66
 555               	.LVL47:
 556               	.L54:
 474:../tmk_core/common/action.c ****         send_keyboard_report();
 475:../tmk_core/common/action.c ****     }
 476:../tmk_core/common/action.c ****     else if IS_SYSTEM(code) {
 557               		.loc 1 476 0
 558 007e 9BE5      		ldi r25,lo8(91)
 559 0080 980F      		add r25,r24
 560 0082 9330      		cpi r25,lo8(3)
 561 0084 00F4      		brsh .L55
 477:../tmk_core/common/action.c ****         host_system_send(0);
 562               		.loc 1 477 0
 563 0086 80E0      		ldi r24,0
 564 0088 90E0      		ldi r25,0
 565               	.LVL48:
 566 008a 0C94 0000 		jmp host_system_send
 567               	.LVL49:
 568               	.L55:
 478:../tmk_core/common/action.c ****     }
 479:../tmk_core/common/action.c ****     else if IS_CONSUMER(code) {
 569               		.loc 1 479 0
 570 008e 885A      		subi r24,lo8(-(88))
 571               	.LVL50:
 572 0090 8531      		cpi r24,lo8(21)
 573 0092 00F4      		brsh .L46
 480:../tmk_core/common/action.c ****         host_consumer_send(0);
 574               		.loc 1 480 0
 575 0094 80E0      		ldi r24,0
 576 0096 90E0      		ldi r25,0
 577               	.LVL51:
 578 0098 0C94 0000 		jmp host_consumer_send
 579               	.LVL52:
 580               	.L46:
 581 009c 0895      		ret
 582               		.cfi_endproc
 583               	.LFE106:
 585               		.section	.text.register_mods,"ax",@progbits
 586               	.global	register_mods
 588               	register_mods:
 589               	.LFB107:
 481:../tmk_core/common/action.c ****     }
 482:../tmk_core/common/action.c **** }
 483:../tmk_core/common/action.c **** 
 484:../tmk_core/common/action.c **** void register_mods(uint8_t mods)
 485:../tmk_core/common/action.c **** {
 590               		.loc 1 485 0
 591               		.cfi_startproc
 592               	.LVL53:
 593               	/* prologue: function */
 594               	/* frame size = 0 */
 595               	/* stack size = 0 */
 596               	.L__stack_usage = 0
 486:../tmk_core/common/action.c ****     if (mods) {
 597               		.loc 1 486 0
 598 0000 8823      		tst r24
 599 0002 01F0      		breq .L67
 487:../tmk_core/common/action.c ****         add_mods(mods);
 600               		.loc 1 487 0
 601 0004 0E94 0000 		call add_mods
 602               	.LVL54:
 488:../tmk_core/common/action.c ****         send_keyboard_report();
 603               		.loc 1 488 0
 604 0008 0C94 0000 		jmp send_keyboard_report
 605               	.LVL55:
 606               	.L67:
 607 000c 0895      		ret
 608               		.cfi_endproc
 609               	.LFE107:
 611               		.section	.text.unregister_mods,"ax",@progbits
 612               	.global	unregister_mods
 614               	unregister_mods:
 615               	.LFB108:
 489:../tmk_core/common/action.c ****     }
 490:../tmk_core/common/action.c **** }
 491:../tmk_core/common/action.c **** 
 492:../tmk_core/common/action.c **** void unregister_mods(uint8_t mods)
 493:../tmk_core/common/action.c **** {
 616               		.loc 1 493 0
 617               		.cfi_startproc
 618               	.LVL56:
 619               	/* prologue: function */
 620               	/* frame size = 0 */
 621               	/* stack size = 0 */
 622               	.L__stack_usage = 0
 494:../tmk_core/common/action.c ****     if (mods) {
 623               		.loc 1 494 0
 624 0000 8823      		tst r24
 625 0002 01F0      		breq .L69
 495:../tmk_core/common/action.c ****         del_mods(mods);
 626               		.loc 1 495 0
 627 0004 0E94 0000 		call del_mods
 628               	.LVL57:
 496:../tmk_core/common/action.c ****         send_keyboard_report();
 629               		.loc 1 496 0
 630 0008 0C94 0000 		jmp send_keyboard_report
 631               	.LVL58:
 632               	.L69:
 633 000c 0895      		ret
 634               		.cfi_endproc
 635               	.LFE108:
 637               		.section	.text.process_action,"ax",@progbits
 638               	.global	process_action
 640               	process_action:
 641               	.LFB104:
  59:../tmk_core/common/action.c ****     keyevent_t event = record->event;
 642               		.loc 1 59 0
 643               		.cfi_startproc
 644               	.LVL59:
 645 0000 CF92      		push r12
 646               	.LCFI5:
 647               		.cfi_def_cfa_offset 3
 648               		.cfi_offset 12, -2
 649 0002 DF92      		push r13
 650               	.LCFI6:
 651               		.cfi_def_cfa_offset 4
 652               		.cfi_offset 13, -3
 653 0004 EF92      		push r14
 654               	.LCFI7:
 655               		.cfi_def_cfa_offset 5
 656               		.cfi_offset 14, -4
 657 0006 FF92      		push r15
 658               	.LCFI8:
 659               		.cfi_def_cfa_offset 6
 660               		.cfi_offset 15, -5
 661 0008 0F93      		push r16
 662               	.LCFI9:
 663               		.cfi_def_cfa_offset 7
 664               		.cfi_offset 16, -6
 665 000a 1F93      		push r17
 666               	.LCFI10:
 667               		.cfi_def_cfa_offset 8
 668               		.cfi_offset 17, -7
 669 000c CF93      		push r28
 670               	.LCFI11:
 671               		.cfi_def_cfa_offset 9
 672               		.cfi_offset 28, -8
 673 000e DF93      		push r29
 674               	.LCFI12:
 675               		.cfi_def_cfa_offset 10
 676               		.cfi_offset 29, -9
 677 0010 00D0      		rcall .
 678 0012 00D0      		rcall .
 679 0014 00D0      		rcall .
 680               	.LCFI13:
 681               		.cfi_def_cfa_offset 16
 682 0016 CDB7      		in r28,__SP_L__
 683 0018 DEB7      		in r29,__SP_H__
 684               	.LCFI14:
 685               		.cfi_def_cfa_register 28
 686               	/* prologue: function */
 687               	/* frame size = 6 */
 688               	/* stack size = 14 */
 689               	.L__stack_usage = 14
  60:../tmk_core/common/action.c **** #ifndef NO_ACTION_TAPPING
 690               		.loc 1 60 0
 691 001a 25E0      		ldi r18,lo8(5)
 692 001c FC01      		movw r30,r24
 693 001e DE01      		movw r26,r28
 694 0020 1196      		adiw r26,1
 695               		0:
 696 0022 0190      		ld r0,Z+
 697 0024 0D92      		st X+,r0
 698 0026 2A95      		dec r18
 699 0028 01F4      		brne 0b
 700 002a FC01      		movw r30,r24
 701 002c 4081      		ld r20,Z
 702               	.LVL60:
 703 002e 3181      		ldd r19,Z+1
 704               	.LVL61:
 705 0030 F280      		ldd r15,Z+2
 706               	.LVL62:
  62:../tmk_core/common/action.c **** #endif
 707               		.loc 1 62 0
 708 0032 2581      		ldd r18,Z+5
 709 0034 2295      		swap r18
 710 0036 2F70      		andi r18,lo8(15)
 711               	.LVL63:
 712               	.LBB12:
 713               	.LBB13:
 714               		.loc 2 49 0
 715 0038 6381      		ldd r22,Z+3
 716 003a 7481      		ldd r23,Z+4
 717 003c 672B      		or r22,r23
 718 003e 01F4      		brne .+2
 719 0040 00C0      		rjmp .L71
 720 0042 3F3F      		cpi r19,lo8(-1)
 721 0044 01F4      		brne .L73
 722               	.LBE13:
 723               	.LBE12:
  65:../tmk_core/common/action.c **** 
 724               		.loc 1 65 0
 725 0046 4F3F      		cpi r20,lo8(-1)
 726 0048 01F4      		brne .+2
 727 004a 00C0      		rjmp .L71
 728               	.L73:
 729 004c 6C01      		movw r12,r24
  67:../tmk_core/common/action.c ****     dprint("ACTION: "); debug_action(action);
 730               		.loc 1 67 0
 731 004e 4983      		std Y+1,r20
 732 0050 3A83      		std Y+2,r19
 733 0052 8981      		ldd r24,Y+1
 734 0054 9A81      		ldd r25,Y+2
 735               	.LVL64:
 736 0056 2E83      		std Y+6,r18
 737 0058 0E94 0000 		call layer_switch_get_action
 738               	.LVL65:
 739 005c 182F      		mov r17,r24
 740               	.LVL66:
 741 005e 092F      		mov r16,r25
  70:../tmk_core/common/action.c ****     dprint(" default_layer_state: "); default_layer_debug();
 742               		.loc 1 70 0
 743 0060 0E94 0000 		call layer_debug
 744               	.LVL67:
  71:../tmk_core/common/action.c **** #endif
 745               		.loc 1 71 0
 746 0064 0E94 0000 		call default_layer_debug
 747               	.LVL68:
  75:../tmk_core/common/action.c ****         /* Key and Mods */
 748               		.loc 1 75 0
 749 0068 E02F      		mov r30,r16
 750 006a E295      		swap r30
 751 006c EF70      		andi r30,lo8(15)
 752 006e F0E0      		ldi r31,0
 753 0070 E050      		subi r30,lo8(-(gs(.L76)))
 754 0072 F040      		sbci r31,hi8(-(gs(.L76)))
 755 0074 2E81      		ldd r18,Y+6
 756 0076 0C94 0000 		jmp __tablejump2__
 757               		.section	.progmem.gcc_sw_table.process_action,"a",@progbits
 758               		.p2align	1
 759               	.L76:
 760 0000 0000      		.word gs(.L75)
 761 0002 0000      		.word gs(.L75)
 762 0004 0000      		.word gs(.L77)
 763 0006 0000      		.word gs(.L77)
 764 0008 0000      		.word gs(.L78)
 765 000a 0000      		.word gs(.L79)
 766 000c 0000      		.word gs(.L71)
 767 000e 0000      		.word gs(.L71)
 768 0010 0000      		.word gs(.L80)
 769 0012 0000      		.word gs(.L71)
 770 0014 0000      		.word gs(.L81)
 771 0016 0000      		.word gs(.L81)
 772 0018 0000      		.word gs(.L82)
 773 001a 0000      		.word gs(.L71)
 774 001c 0000      		.word gs(.L71)
 775 001e 0000      		.word gs(.L83)
 776               		.section	.text.process_action
 777               	.L75:
 778               	.LBB14:
  80:../tmk_core/common/action.c ****                                                                 action.key.mods<<4;
 779               		.loc 1 80 0
 780 007a 802F      		mov r24,r16
 781 007c 807F      		andi r24,lo8(-16)
 782 007e 902F      		mov r25,r16
 783 0080 9F70      		andi r25,lo8(15)
 784 0082 092F      		mov r16,r25
 785 0084 8823      		tst r24
 786 0086 01F0      		breq .L85
  80:../tmk_core/common/action.c ****                                                                 action.key.mods<<4;
 787               		.loc 1 80 0 is_stmt 0 discriminator 2
 788 0088 0295      		swap r16
 789 008a 007F      		andi r16,lo8(-16)
 790               	.L85:
 791               	.LVL69:
  82:../tmk_core/common/action.c ****                     if (mods) {
 792               		.loc 1 82 0 is_stmt 1 discriminator 4
 793 008c FF20      		tst r15
 794 008e 01F0      		breq .L86
  83:../tmk_core/common/action.c ****                         add_weak_mods(mods);
 795               		.loc 1 83 0
 796 0090 0023      		tst r16
 797 0092 01F4      		brne .+2
 798 0094 00C0      		rjmp .L170
  84:../tmk_core/common/action.c ****                         send_keyboard_report();
 799               		.loc 1 84 0
 800 0096 802F      		mov r24,r16
 801 0098 0E94 0000 		call add_weak_mods
 802               	.LVL70:
  85:../tmk_core/common/action.c ****                     }
 803               		.loc 1 85 0
 804 009c 0E94 0000 		call send_keyboard_report
 805               	.LVL71:
 806 00a0 00C0      		rjmp .L170
 807               	.L86:
  89:../tmk_core/common/action.c ****                     if (mods) {
 808               		.loc 1 89 0
 809 00a2 812F      		mov r24,r17
 810 00a4 0E94 0000 		call unregister_code
 811               	.LVL72:
  90:../tmk_core/common/action.c ****                         del_weak_mods(mods);
 812               		.loc 1 90 0
 813 00a8 0023      		tst r16
 814 00aa 01F4      		brne .+2
 815 00ac 00C0      		rjmp .L71
  91:../tmk_core/common/action.c ****                         send_keyboard_report();
 816               		.loc 1 91 0
 817 00ae 802F      		mov r24,r16
 818 00b0 0E94 0000 		call del_weak_mods
 819               	.LVL73:
 820               	/* epilogue start */
 821               	.LBE14:
 346:../tmk_core/common/action.c **** 
 822               		.loc 1 346 0
 823 00b4 2696      		adiw r28,6
 824               	.LVL74:
 825 00b6 0FB6      		in __tmp_reg__,__SREG__
 826 00b8 F894      		cli
 827 00ba DEBF      		out __SP_H__,r29
 828 00bc 0FBE      		out __SREG__,__tmp_reg__
 829 00be CDBF      		out __SP_L__,r28
 830               	.LVL75:
 831 00c0 DF91      		pop r29
 832 00c2 CF91      		pop r28
 833 00c4 1F91      		pop r17
 834 00c6 0F91      		pop r16
 835               	.LVL76:
 836 00c8 FF90      		pop r15
 837               	.LVL77:
 838 00ca EF90      		pop r14
 839 00cc DF90      		pop r13
 840 00ce CF90      		pop r12
 841               	.LVL78:
 842               	.LBB15:
  92:../tmk_core/common/action.c ****                     }
 843               		.loc 1 92 0
 844 00d0 0C94 0000 		jmp send_keyboard_report
 845               	.LVL79:
 846               	.L77:
 847               	.LBE15:
 848               	.LBB16:
 101:../tmk_core/common/action.c ****                                                                     action.key.mods<<4;
 849               		.loc 1 101 0
 850 00d4 802F      		mov r24,r16
 851 00d6 807F      		andi r24,lo8(-16)
 852 00d8 902F      		mov r25,r16
 853 00da 9F70      		andi r25,lo8(15)
 854 00dc 092F      		mov r16,r25
 855 00de 8032      		cpi r24,lo8(32)
 856 00e0 01F0      		breq .L90
 101:../tmk_core/common/action.c ****                                                                     action.key.mods<<4;
 857               		.loc 1 101 0 is_stmt 0 discriminator 2
 858 00e2 0295      		swap r16
 859 00e4 007F      		andi r16,lo8(-16)
 860               	.L90:
 861               	.LVL80:
 103:../tmk_core/common/action.c ****     #ifndef NO_ACTION_ONESHOT
 862               		.loc 1 103 0 is_stmt 1 discriminator 4
 863 00e6 1123      		tst r17
 864 00e8 01F0      		breq .L92
 865 00ea 1130      		cpi r17,lo8(1)
 866 00ec 01F0      		breq .L93
 867 00ee 00C0      		rjmp .L178
 868               	.L92:
 107:../tmk_core/common/action.c ****                             if (tap_count == 0) {
 869               		.loc 1 107 0
 870 00f0 FF20      		tst r15
 871 00f2 01F0      		breq .L94
 109:../tmk_core/common/action.c ****                             }
 872               		.loc 1 109 0
 873 00f4 802F      		mov r24,r16
 108:../tmk_core/common/action.c ****                                 register_mods(mods);
 874               		.loc 1 108 0
 875 00f6 2223      		tst r18
 876 00f8 01F0      		breq .L166
 111:../tmk_core/common/action.c ****                                 dprint("MODS_TAP: Oneshot: start\n");
 877               		.loc 1 111 0
 878 00fa 2130      		cpi r18,lo8(1)
 879 00fc 01F4      		brne .L166
 880               	/* epilogue start */
 881               	.LBE16:
 346:../tmk_core/common/action.c **** 
 882               		.loc 1 346 0
 883 00fe 2696      		adiw r28,6
 884 0100 0FB6      		in __tmp_reg__,__SREG__
 885 0102 F894      		cli
 886 0104 DEBF      		out __SP_H__,r29
 887 0106 0FBE      		out __SREG__,__tmp_reg__
 888 0108 CDBF      		out __SP_L__,r28
 889 010a DF91      		pop r29
 890 010c CF91      		pop r28
 891 010e 1F91      		pop r17
 892 0110 0F91      		pop r16
 893               	.LVL81:
 894 0112 FF90      		pop r15
 895               	.LVL82:
 896 0114 EF90      		pop r14
 897 0116 DF90      		pop r13
 898 0118 CF90      		pop r12
 899               	.LVL83:
 900               	.LBB17:
 113:../tmk_core/common/action.c ****                             }
 901               		.loc 1 113 0
 902 011a 0C94 0000 		jmp set_oneshot_mods
 903               	.LVL84:
 904               	.L94:
 119:../tmk_core/common/action.c ****                                 clear_oneshot_mods();
 905               		.loc 1 119 0
 906 011e 2223      		tst r18
 907 0120 01F0      		breq .L167
 123:../tmk_core/common/action.c ****                                 // Retain Oneshot mods
 908               		.loc 1 123 0
 909 0122 2130      		cpi r18,lo8(1)
 910 0124 01F4      		brne .+2
 911 0126 00C0      		rjmp .L71
 912               	.L167:
 127:../tmk_core/common/action.c ****                                 unregister_mods(mods);
 913               		.loc 1 127 0
 914 0128 0E94 0000 		call clear_oneshot_mods
 915               	.LVL85:
 916 012c 00C0      		rjmp .L104
 917               	.L93:
 134:../tmk_core/common/action.c ****                             if (tap_count <= TAPPING_TOGGLE) {
 918               		.loc 1 134 0
 919 012e FF20      		tst r15
 920 0130 01F0      		breq .L99
 135:../tmk_core/common/action.c ****                                 if (mods & get_mods()) {
 921               		.loc 1 135 0
 922 0132 2630      		cpi r18,lo8(6)
 923 0134 00F0      		brlo .+2
 924 0136 00C0      		rjmp .L71
 136:../tmk_core/common/action.c ****                                     dprint("MODS_TAP_TOGGLE: toggle mods off\n");
 925               		.loc 1 136 0
 926 0138 0E94 0000 		call get_mods
 927               	.LVL86:
 928 013c 8023      		and r24,r16
 929 013e 01F0      		breq .L100
 930 0140 00C0      		rjmp .L104
 931               	.L178:
 152:../tmk_core/common/action.c ****                             if (tap_count > 0) {
 932               		.loc 1 152 0
 933 0142 FF20      		tst r15
 934 0144 01F0      		breq .L101
 153:../tmk_core/common/action.c ****                                 if (record->tap.interrupted) {
 935               		.loc 1 153 0
 936 0146 2111      		cpse r18,__zero_reg__
 937 0148 00C0      		rjmp .L179
 938               	.L100:
 141:../tmk_core/common/action.c ****                                 }
 939               		.loc 1 141 0
 940 014a 802F      		mov r24,r16
 941               	.LVL87:
 942               	.L166:
 943               	/* epilogue start */
 944               	.LBE17:
 346:../tmk_core/common/action.c **** 
 945               		.loc 1 346 0
 946 014c 2696      		adiw r28,6
 947 014e 0FB6      		in __tmp_reg__,__SREG__
 948 0150 F894      		cli
 949 0152 DEBF      		out __SP_H__,r29
 950 0154 0FBE      		out __SREG__,__tmp_reg__
 951 0156 CDBF      		out __SP_L__,r28
 952 0158 DF91      		pop r29
 953 015a CF91      		pop r28
 954 015c 1F91      		pop r17
 955               	.LVL88:
 956 015e 0F91      		pop r16
 957 0160 FF90      		pop r15
 958               	.LVL89:
 959 0162 EF90      		pop r14
 960 0164 DF90      		pop r13
 961 0166 CF90      		pop r12
 962               	.LVL90:
 963               	.LBB18:
 141:../tmk_core/common/action.c ****                                 }
 964               		.loc 1 141 0
 965 0168 0C94 0000 		jmp register_mods
 966               	.LVL91:
 967               	.L99:
 145:../tmk_core/common/action.c ****                                 dprint("MODS_TAP_TOGGLE: release : unregister_mods\n");
 968               		.loc 1 145 0
 969 016c 2530      		cpi r18,lo8(5)
 970 016e 00F0      		brlo .+2
 971 0170 00C0      		rjmp .L71
 972 0172 00C0      		rjmp .L104
 973               	.L179:
 154:../tmk_core/common/action.c ****                                     dprint("MODS_TAP: Tap: Cancel: add_mods\n");
 974               		.loc 1 154 0
 975 0174 F601      		movw r30,r12
 976 0176 8581      		ldd r24,Z+5
 977 0178 80FF      		sbrs r24,0
 978 017a 00C0      		rjmp .L170
 157:../tmk_core/common/action.c ****                                     register_mods(mods);
 979               		.loc 1 157 0
 980 017c 8F70      		andi r24,lo8(15)
 981 017e 8583      		std Z+5,r24
 982 0180 00C0      		rjmp .L100
 983               	.L101:
 168:../tmk_core/common/action.c ****                                 dprint("MODS_TAP: Tap: unregister_code\n");
 984               		.loc 1 168 0
 985 0182 2111      		cpse r18,__zero_reg__
 986 0184 00C0      		rjmp .L171
 987               	.L104:
 173:../tmk_core/common/action.c ****                             }
 988               		.loc 1 173 0
 989 0186 802F      		mov r24,r16
 990 0188 00C0      		rjmp .L172
 991               	.LVL92:
 992               	.L78:
 993               	.LBE18:
 184:../tmk_core/common/action.c ****                 case PAGE_SYSTEM:
 994               		.loc 1 184 0
 995 018a 202F      		mov r18,r16
 996 018c 2695      		lsr r18
 997 018e 2695      		lsr r18
 998 0190 2370      		andi r18,lo8(3)
 999 0192 30E0      		ldi r19,0
 1000 0194 2115      		cp r18,__zero_reg__
 1001 0196 3105      		cpc r19,__zero_reg__
 1002 0198 01F0      		breq .L105
 1003 019a 2130      		cpi r18,1
 1004 019c 3105      		cpc r19,__zero_reg__
 1005 019e 01F0      		breq .L106
 1006 01a0 00C0      		rjmp .L71
 1007               	.L105:
 186:../tmk_core/common/action.c ****                         host_system_send(action.usage.code);
 1008               		.loc 1 186 0
 1009 01a2 FF20      		tst r15
 1010 01a4 01F0      		breq .L107
 1011               	.LVL93:
 187:../tmk_core/common/action.c ****                     } else {
 1012               		.loc 1 187 0
 1013 01a6 812F      		mov r24,r17
 1014 01a8 902F      		mov r25,r16
 1015 01aa 9370      		andi r25,lo8(3)
 1016 01ac 00C0      		rjmp .L173
 1017               	.LVL94:
 1018               	.L107:
 189:../tmk_core/common/action.c ****                     }
 1019               		.loc 1 189 0
 1020 01ae 80E0      		ldi r24,0
 1021 01b0 90E0      		ldi r25,0
 1022               	.LVL95:
 1023               	.L173:
 1024               	/* epilogue start */
 346:../tmk_core/common/action.c **** 
 1025               		.loc 1 346 0
 1026 01b2 2696      		adiw r28,6
 1027 01b4 0FB6      		in __tmp_reg__,__SREG__
 1028 01b6 F894      		cli
 1029 01b8 DEBF      		out __SP_H__,r29
 1030 01ba 0FBE      		out __SREG__,__tmp_reg__
 1031 01bc CDBF      		out __SP_L__,r28
 1032 01be DF91      		pop r29
 1033 01c0 CF91      		pop r28
 1034 01c2 1F91      		pop r17
 1035               	.LVL96:
 1036 01c4 0F91      		pop r16
 1037 01c6 FF90      		pop r15
 1038               	.LVL97:
 1039 01c8 EF90      		pop r14
 1040 01ca DF90      		pop r13
 1041 01cc CF90      		pop r12
 1042               	.LVL98:
 189:../tmk_core/common/action.c ****                     }
 1043               		.loc 1 189 0
 1044 01ce 0C94 0000 		jmp host_system_send
 1045               	.LVL99:
 1046               	.L106:
 193:../tmk_core/common/action.c ****                         host_consumer_send(action.usage.code);
 1047               		.loc 1 193 0
 1048 01d2 FF20      		tst r15
 1049 01d4 01F0      		breq .L108
 1050               	.LVL100:
 194:../tmk_core/common/action.c ****                     } else {
 1051               		.loc 1 194 0
 1052 01d6 812F      		mov r24,r17
 1053 01d8 902F      		mov r25,r16
 1054 01da 9370      		andi r25,lo8(3)
 1055 01dc 00C0      		rjmp .L175
 1056               	.LVL101:
 1057               	.L108:
 196:../tmk_core/common/action.c ****                     }
 1058               		.loc 1 196 0
 1059 01de 80E0      		ldi r24,0
 1060 01e0 90E0      		ldi r25,0
 1061               	.LVL102:
 1062               	.L175:
 1063               	/* epilogue start */
 346:../tmk_core/common/action.c **** 
 1064               		.loc 1 346 0
 1065 01e2 2696      		adiw r28,6
 1066 01e4 0FB6      		in __tmp_reg__,__SREG__
 1067 01e6 F894      		cli
 1068 01e8 DEBF      		out __SP_H__,r29
 1069 01ea 0FBE      		out __SREG__,__tmp_reg__
 1070 01ec CDBF      		out __SP_L__,r28
 1071 01ee DF91      		pop r29
 1072 01f0 CF91      		pop r28
 1073 01f2 1F91      		pop r17
 1074               	.LVL103:
 1075 01f4 0F91      		pop r16
 1076 01f6 FF90      		pop r15
 1077               	.LVL104:
 1078 01f8 EF90      		pop r14
 1079 01fa DF90      		pop r13
 1080 01fc CF90      		pop r12
 1081               	.LVL105:
 196:../tmk_core/common/action.c ****                     }
 1082               		.loc 1 196 0
 1083 01fe 0C94 0000 		jmp host_consumer_send
 1084               	.LVL106:
 1085               	.L79:
 206:../tmk_core/common/action.c ****                 mousekey_send();
 1086               		.loc 1 206 0
 1087 0202 812F      		mov r24,r17
 205:../tmk_core/common/action.c ****                 mousekey_on(action.key.code);
 1088               		.loc 1 205 0
 1089 0204 FF20      		tst r15
 1090 0206 01F0      		breq .L109
 206:../tmk_core/common/action.c ****                 mousekey_send();
 1091               		.loc 1 206 0
 1092 0208 0E94 0000 		call mousekey_on
 1093               	.LVL107:
 1094 020c 00C0      		rjmp .L176
 1095               	.L109:
 209:../tmk_core/common/action.c ****                 mousekey_send();
 1096               		.loc 1 209 0
 1097 020e 0E94 0000 		call mousekey_off
 1098               	.LVL108:
 1099               	.L176:
 1100               	/* epilogue start */
 346:../tmk_core/common/action.c **** 
 1101               		.loc 1 346 0
 1102 0212 2696      		adiw r28,6
 1103 0214 0FB6      		in __tmp_reg__,__SREG__
 1104 0216 F894      		cli
 1105 0218 DEBF      		out __SP_H__,r29
 1106 021a 0FBE      		out __SREG__,__tmp_reg__
 1107 021c CDBF      		out __SP_L__,r28
 1108 021e DF91      		pop r29
 1109 0220 CF91      		pop r28
 1110 0222 1F91      		pop r17
 1111               	.LVL109:
 1112 0224 0F91      		pop r16
 1113 0226 FF90      		pop r15
 1114               	.LVL110:
 1115 0228 EF90      		pop r14
 1116 022a DF90      		pop r13
 1117 022c CF90      		pop r12
 1118               	.LVL111:
 210:../tmk_core/common/action.c ****             }
 1119               		.loc 1 210 0
 1120 022e 0C94 0000 		jmp mousekey_send
 1121               	.LVL112:
 1122               	.L80:
 216:../tmk_core/common/action.c ****                 /* Default Layer Bitwise Operation */
 1123               		.loc 1 216 0
 1124 0232 802F      		mov r24,r16
 1125 0234 8370      		andi r24,lo8(3)
 1126 0236 01F0      		breq .+2
 1127 0238 00C0      		rjmp .L110
 218:../tmk_core/common/action.c ****                     uint8_t shift = action.layer_bitop.part*4;
 1128               		.loc 1 218 0
 1129 023a F110      		cpse r15,__zero_reg__
 1130 023c 00C0      		rjmp .L71
 1131               	.LVL113:
 1132               	.LBB19:
 219:../tmk_core/common/action.c ****                     uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
 1133               		.loc 1 219 0
 1134 023e 812F      		mov r24,r17
 1135 0240 8295      		swap r24
 1136 0242 8695      		lsr r24
 1137 0244 8770      		andi r24,lo8(7)
 1138 0246 880F      		lsl r24
 1139 0248 880F      		lsl r24
 220:../tmk_core/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 1140               		.loc 1 220 0
 1141 024a 912F      		mov r25,r17
 1142 024c 9F70      		andi r25,lo8(15)
 1143 024e C92E      		mov r12,r25
 1144               	.LVL114:
 1145 0250 D12C      		mov r13,__zero_reg__
 1146 0252 E12C      		mov r14,__zero_reg__
 1147 0254 F12C      		mov r15,__zero_reg__
 1148 0256 082E      		mov r0,r24
 1149 0258 00C0      		rjmp 2f
 1150               		1:
 1151 025a CC0C      		lsl r12
 1152 025c DD1C      		rol r13
 1153 025e EE1C      		rol r14
 1154 0260 FF1C      		rol r15
 1155               		2:
 1156 0262 0A94      		dec r0
 1157 0264 02F4      		brpl 1b
 1158               	.LVL115:
 221:../tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1159               		.loc 1 221 0
 1160 0266 14FF      		sbrs r17,4
 1161 0268 00C0      		rjmp .L138
 221:../tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1162               		.loc 1 221 0 is_stmt 0 discriminator 1
 1163 026a 4FE0      		ldi r20,lo8(15)
 1164 026c 50E0      		ldi r21,0
 1165 026e 60E0      		ldi r22,0
 1166 0270 70E0      		ldi r23,0
 1167 0272 00C0      		rjmp 2f
 1168               		1:
 1169 0274 440F      		lsl r20
 1170 0276 551F      		rol r21
 1171 0278 661F      		rol r22
 1172 027a 771F      		rol r23
 1173               		2:
 1174 027c 8A95      		dec r24
 1175 027e 02F4      		brpl 1b
 1176 0280 CB01      		movw r24,r22
 1177 0282 BA01      		movw r22,r20
 1178 0284 6095      		com r22
 1179 0286 7095      		com r23
 1180 0288 8095      		com r24
 1181 028a 9095      		com r25
 1182 028c 00C0      		rjmp .L111
 1183               	.L138:
 221:../tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1184               		.loc 1 221 0
 1185 028e 60E0      		ldi r22,0
 1186 0290 70E0      		ldi r23,0
 1187 0292 CB01      		movw r24,r22
 1188               	.L111:
 1189               	.LVL116:
 222:../tmk_core/common/action.c ****                         case OP_BIT_AND: default_layer_and(bits | mask); break;
 1190               		.loc 1 222 0 is_stmt 1 discriminator 4
 1191 0294 202F      		mov r18,r16
 1192 0296 2695      		lsr r18
 1193 0298 2695      		lsr r18
 1194 029a 2370      		andi r18,lo8(3)
 1195 029c 422F      		mov r20,r18
 1196 029e 50E0      		ldi r21,0
 1197 02a0 4230      		cpi r20,2
 1198 02a2 5105      		cpc r21,__zero_reg__
 1199 02a4 01F0      		breq .L113
 1200 02a6 4330      		cpi r20,3
 1201 02a8 5105      		cpc r21,__zero_reg__
 1202 02aa 01F0      		breq .L114
 1203 02ac 6C29      		or r22,r12
 1204 02ae 7D29      		or r23,r13
 1205 02b0 8E29      		or r24,r14
 1206 02b2 9F29      		or r25,r15
 1207               	.LVL117:
 1208 02b4 4130      		cpi r20,1
 1209 02b6 5105      		cpc r21,__zero_reg__
 1210 02b8 01F0      		breq .L177
 1211               	/* epilogue start */
 1212               	.LBE19:
 346:../tmk_core/common/action.c **** 
 1213               		.loc 1 346 0 discriminator 4
 1214 02ba 2696      		adiw r28,6
 1215 02bc 0FB6      		in __tmp_reg__,__SREG__
 1216 02be F894      		cli
 1217 02c0 DEBF      		out __SP_H__,r29
 1218 02c2 0FBE      		out __SREG__,__tmp_reg__
 1219 02c4 CDBF      		out __SP_L__,r28
 1220 02c6 DF91      		pop r29
 1221 02c8 CF91      		pop r28
 1222 02ca 1F91      		pop r17
 1223               	.LVL118:
 1224 02cc 0F91      		pop r16
 1225 02ce FF90      		pop r15
 1226               	.LVL119:
 1227 02d0 EF90      		pop r14
 1228 02d2 DF90      		pop r13
 1229 02d4 CF90      		pop r12
 1230               	.LVL120:
 1231               	.LBB20:
 223:../tmk_core/common/action.c ****                         case OP_BIT_OR:  default_layer_or(bits | mask);  break;
 1232               		.loc 1 223 0 discriminator 4
 1233 02d6 0C94 0000 		jmp default_layer_and
 1234               	.LVL121:
 1235               	.L113:
 225:../tmk_core/common/action.c ****                         case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
 1236               		.loc 1 225 0
 1237 02da 6C29      		or r22,r12
 1238 02dc 7D29      		or r23,r13
 1239 02de 8E29      		or r24,r14
 1240 02e0 9F29      		or r25,r15
 1241               	.LVL122:
 1242               	/* epilogue start */
 1243               	.LBE20:
 346:../tmk_core/common/action.c **** 
 1244               		.loc 1 346 0
 1245 02e2 2696      		adiw r28,6
 1246 02e4 0FB6      		in __tmp_reg__,__SREG__
 1247 02e6 F894      		cli
 1248 02e8 DEBF      		out __SP_H__,r29
 1249 02ea 0FBE      		out __SREG__,__tmp_reg__
 1250 02ec CDBF      		out __SP_L__,r28
 1251 02ee DF91      		pop r29
 1252 02f0 CF91      		pop r28
 1253 02f2 1F91      		pop r17
 1254               	.LVL123:
 1255 02f4 0F91      		pop r16
 1256 02f6 FF90      		pop r15
 1257               	.LVL124:
 1258 02f8 EF90      		pop r14
 1259 02fa DF90      		pop r13
 1260 02fc CF90      		pop r12
 1261               	.LVL125:
 1262               	.LBB21:
 225:../tmk_core/common/action.c ****                         case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
 1263               		.loc 1 225 0
 1264 02fe 0C94 0000 		jmp default_layer_xor
 1265               	.LVL126:
 1266               	.L114:
 226:../tmk_core/common/action.c ****                     }
 1267               		.loc 1 226 0
 1268 0302 0E94 0000 		call default_layer_and
 1269               	.LVL127:
 1270 0306 C701      		movw r24,r14
 1271 0308 B601      		movw r22,r12
 1272               	.L177:
 1273               	/* epilogue start */
 1274               	.LBE21:
 346:../tmk_core/common/action.c **** 
 1275               		.loc 1 346 0
 1276 030a 2696      		adiw r28,6
 1277 030c 0FB6      		in __tmp_reg__,__SREG__
 1278 030e F894      		cli
 1279 0310 DEBF      		out __SP_H__,r29
 1280 0312 0FBE      		out __SREG__,__tmp_reg__
 1281 0314 CDBF      		out __SP_L__,r28
 1282 0316 DF91      		pop r29
 1283 0318 CF91      		pop r28
 1284 031a 1F91      		pop r17
 1285               	.LVL128:
 1286 031c 0F91      		pop r16
 1287 031e FF90      		pop r15
 1288               	.LVL129:
 1289 0320 EF90      		pop r14
 1290 0322 DF90      		pop r13
 1291 0324 CF90      		pop r12
 1292               	.LVL130:
 1293               	.LBB22:
 226:../tmk_core/common/action.c ****                     }
 1294               		.loc 1 226 0
 1295 0326 0C94 0000 		jmp default_layer_or
 1296               	.LVL131:
 1297               	.L110:
 1298               	.LBE22:
 231:../tmk_core/common/action.c ****                                     (action.layer_bitop.on & ON_RELEASE)) {
 1299               		.loc 1 231 0
 1300 032a FF20      		tst r15
 1301 032c 01F0      		breq .L116
 231:../tmk_core/common/action.c ****                                     (action.layer_bitop.on & ON_RELEASE)) {
 1302               		.loc 1 231 0 is_stmt 0 discriminator 1
 1303 032e 802F      		mov r24,r16
 1304 0330 8170      		andi r24,lo8(1)
 1305 0332 00C0      		rjmp .L117
 1306               	.L116:
 231:../tmk_core/common/action.c ****                                     (action.layer_bitop.on & ON_RELEASE)) {
 1307               		.loc 1 231 0 discriminator 2
 1308 0334 8695      		lsr r24
 1309               	.L117:
 231:../tmk_core/common/action.c ****                                     (action.layer_bitop.on & ON_RELEASE)) {
 1310               		.loc 1 231 0 discriminator 4
 1311 0336 8823      		tst r24
 1312 0338 01F4      		brne .+2
 1313 033a 00C0      		rjmp .L71
 1314               	.LVL132:
 1315               	.LBB23:
 233:../tmk_core/common/action.c ****                     uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
 1316               		.loc 1 233 0 is_stmt 1
 1317 033c 812F      		mov r24,r17
 1318 033e 8295      		swap r24
 1319 0340 8695      		lsr r24
 1320 0342 8770      		andi r24,lo8(7)
 1321 0344 880F      		lsl r24
 1322 0346 880F      		lsl r24
 234:../tmk_core/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 1323               		.loc 1 234 0
 1324 0348 912F      		mov r25,r17
 1325 034a 9F70      		andi r25,lo8(15)
 1326 034c C92E      		mov r12,r25
 1327               	.LVL133:
 1328 034e D12C      		mov r13,__zero_reg__
 1329 0350 E12C      		mov r14,__zero_reg__
 1330 0352 F12C      		mov r15,__zero_reg__
 1331 0354 082E      		mov r0,r24
 1332 0356 00C0      		rjmp 2f
 1333               		1:
 1334 0358 CC0C      		lsl r12
 1335 035a DD1C      		rol r13
 1336 035c EE1C      		rol r14
 1337 035e FF1C      		rol r15
 1338               		2:
 1339 0360 0A94      		dec r0
 1340 0362 02F4      		brpl 1b
 1341               	.LVL134:
 235:../tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1342               		.loc 1 235 0
 1343 0364 14FF      		sbrs r17,4
 1344 0366 00C0      		rjmp .L139
 235:../tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1345               		.loc 1 235 0 is_stmt 0 discriminator 1
 1346 0368 4FE0      		ldi r20,lo8(15)
 1347 036a 50E0      		ldi r21,0
 1348 036c 60E0      		ldi r22,0
 1349 036e 70E0      		ldi r23,0
 1350 0370 00C0      		rjmp 2f
 1351               		1:
 1352 0372 440F      		lsl r20
 1353 0374 551F      		rol r21
 1354 0376 661F      		rol r22
 1355 0378 771F      		rol r23
 1356               		2:
 1357 037a 8A95      		dec r24
 1358 037c 02F4      		brpl 1b
 1359 037e CB01      		movw r24,r22
 1360 0380 BA01      		movw r22,r20
 1361 0382 6095      		com r22
 1362 0384 7095      		com r23
 1363 0386 8095      		com r24
 1364 0388 9095      		com r25
 1365 038a 00C0      		rjmp .L118
 1366               	.L139:
 235:../tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1367               		.loc 1 235 0
 1368 038c 60E0      		ldi r22,0
 1369 038e 70E0      		ldi r23,0
 1370 0390 CB01      		movw r24,r22
 1371               	.L118:
 1372               	.LVL135:
 236:../tmk_core/common/action.c ****                         case OP_BIT_AND: layer_and(bits | mask); break;
 1373               		.loc 1 236 0 is_stmt 1 discriminator 4
 1374 0392 202F      		mov r18,r16
 1375 0394 2695      		lsr r18
 1376 0396 2695      		lsr r18
 1377 0398 2370      		andi r18,lo8(3)
 1378 039a 422F      		mov r20,r18
 1379 039c 50E0      		ldi r21,0
 1380 039e 4230      		cpi r20,2
 1381 03a0 5105      		cpc r21,__zero_reg__
 1382 03a2 01F0      		breq .L120
 1383 03a4 4330      		cpi r20,3
 1384 03a6 5105      		cpc r21,__zero_reg__
 1385 03a8 01F0      		breq .L121
 1386 03aa 6C29      		or r22,r12
 1387 03ac 7D29      		or r23,r13
 1388 03ae 8E29      		or r24,r14
 1389 03b0 9F29      		or r25,r15
 1390               	.LVL136:
 1391 03b2 4130      		cpi r20,1
 1392 03b4 5105      		cpc r21,__zero_reg__
 1393 03b6 01F0      		breq .L174
 1394               	/* epilogue start */
 1395               	.LBE23:
 346:../tmk_core/common/action.c **** 
 1396               		.loc 1 346 0 discriminator 4
 1397 03b8 2696      		adiw r28,6
 1398 03ba 0FB6      		in __tmp_reg__,__SREG__
 1399 03bc F894      		cli
 1400 03be DEBF      		out __SP_H__,r29
 1401 03c0 0FBE      		out __SREG__,__tmp_reg__
 1402 03c2 CDBF      		out __SP_L__,r28
 1403 03c4 DF91      		pop r29
 1404 03c6 CF91      		pop r28
 1405 03c8 1F91      		pop r17
 1406               	.LVL137:
 1407 03ca 0F91      		pop r16
 1408 03cc FF90      		pop r15
 1409               	.LVL138:
 1410 03ce EF90      		pop r14
 1411 03d0 DF90      		pop r13
 1412 03d2 CF90      		pop r12
 1413               	.LVL139:
 1414               	.LBB24:
 237:../tmk_core/common/action.c ****                         case OP_BIT_OR:  layer_or(bits | mask);  break;
 1415               		.loc 1 237 0 discriminator 4
 1416 03d4 0C94 0000 		jmp layer_and
 1417               	.LVL140:
 1418               	.L120:
 239:../tmk_core/common/action.c ****                         case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
 1419               		.loc 1 239 0
 1420 03d8 6C29      		or r22,r12
 1421 03da 7D29      		or r23,r13
 1422 03dc 8E29      		or r24,r14
 1423 03de 9F29      		or r25,r15
 1424               	.LVL141:
 1425               	/* epilogue start */
 1426               	.LBE24:
 346:../tmk_core/common/action.c **** 
 1427               		.loc 1 346 0
 1428 03e0 2696      		adiw r28,6
 1429 03e2 0FB6      		in __tmp_reg__,__SREG__
 1430 03e4 F894      		cli
 1431 03e6 DEBF      		out __SP_H__,r29
 1432 03e8 0FBE      		out __SREG__,__tmp_reg__
 1433 03ea CDBF      		out __SP_L__,r28
 1434 03ec DF91      		pop r29
 1435 03ee CF91      		pop r28
 1436 03f0 1F91      		pop r17
 1437               	.LVL142:
 1438 03f2 0F91      		pop r16
 1439 03f4 FF90      		pop r15
 1440               	.LVL143:
 1441 03f6 EF90      		pop r14
 1442 03f8 DF90      		pop r13
 1443 03fa CF90      		pop r12
 1444               	.LVL144:
 1445               	.LBB25:
 239:../tmk_core/common/action.c ****                         case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
 1446               		.loc 1 239 0
 1447 03fc 0C94 0000 		jmp layer_xor
 1448               	.LVL145:
 1449               	.L121:
 240:../tmk_core/common/action.c ****                     }
 1450               		.loc 1 240 0
 1451 0400 0E94 0000 		call layer_and
 1452               	.LVL146:
 1453 0404 C701      		movw r24,r14
 1454 0406 B601      		movw r22,r12
 1455               	.L174:
 1456               	/* epilogue start */
 1457               	.LBE25:
 346:../tmk_core/common/action.c **** 
 1458               		.loc 1 346 0
 1459 0408 2696      		adiw r28,6
 1460 040a 0FB6      		in __tmp_reg__,__SREG__
 1461 040c F894      		cli
 1462 040e DEBF      		out __SP_H__,r29
 1463 0410 0FBE      		out __SREG__,__tmp_reg__
 1464 0412 CDBF      		out __SP_L__,r28
 1465 0414 DF91      		pop r29
 1466 0416 CF91      		pop r28
 1467 0418 1F91      		pop r17
 1468               	.LVL147:
 1469 041a 0F91      		pop r16
 1470 041c FF90      		pop r15
 1471               	.LVL148:
 1472 041e EF90      		pop r14
 1473 0420 DF90      		pop r13
 1474 0422 CF90      		pop r12
 1475               	.LVL149:
 1476               	.LBB26:
 240:../tmk_core/common/action.c ****                     }
 1477               		.loc 1 240 0
 1478 0424 0C94 0000 		jmp layer_or
 1479               	.LVL150:
 1480               	.L81:
 1481               	.LBE26:
 248:../tmk_core/common/action.c ****                 case 0xe0 ... 0xef:
 1482               		.loc 1 248 0
 1483 0428 103F      		cpi r17,lo8(-16)
 1484 042a 01F0      		breq .L124
 1485 042c 00F4      		brsh .L125
 1486 042e 103E      		cpi r17,lo8(-32)
 1487 0430 00F4      		brsh .L165
 1488 0432 00C0      		rjmp .L123
 1489               	.L125:
 1490 0434 123F      		cpi r17,lo8(-14)
 1491 0436 01F4      		brne .+2
 1492 0438 00C0      		rjmp .L127
 1493 043a 00F0      		brlo .L128
 1494 043c 133F      		cpi r17,lo8(-13)
 1495 043e 01F4      		brne .+2
 1496 0440 00C0      		rjmp .L129
 1497 0442 00C0      		rjmp .L123
 1498               	.L165:
 1499 0444 1F70      		andi r17,lo8(15)
 1500               	.LVL151:
 1501 0446 802F      		mov r24,r16
 1502 0448 8F71      		andi r24,lo8(31)
 251:../tmk_core/common/action.c ****                         layer_on(action.layer_tap.val);
 1503               		.loc 1 251 0
 1504 044a FF20      		tst r15
 1505 044c 01F0      		breq .L130
 252:../tmk_core/common/action.c ****                         register_mods(action.layer_tap.code & 0x0f);
 1506               		.loc 1 252 0
 1507 044e 0E94 0000 		call layer_on
 1508               	.LVL152:
 253:../tmk_core/common/action.c ****                     } else {
 1509               		.loc 1 253 0
 1510 0452 812F      		mov r24,r17
 1511 0454 00C0      		rjmp .L166
 1512               	.L130:
 255:../tmk_core/common/action.c ****                         unregister_mods(action.layer_tap.code & 0x0f);
 1513               		.loc 1 255 0
 1514 0456 0E94 0000 		call layer_off
 1515               	.LVL153:
 256:../tmk_core/common/action.c ****                     }
 1516               		.loc 1 256 0
 1517 045a 812F      		mov r24,r17
 1518               	.LVL154:
 1519               	.L172:
 1520               	/* epilogue start */
 346:../tmk_core/common/action.c **** 
 1521               		.loc 1 346 0
 1522 045c 2696      		adiw r28,6
 1523 045e 0FB6      		in __tmp_reg__,__SREG__
 1524 0460 F894      		cli
 1525 0462 DEBF      		out __SP_H__,r29
 1526 0464 0FBE      		out __SREG__,__tmp_reg__
 1527 0466 CDBF      		out __SP_L__,r28
 1528 0468 DF91      		pop r29
 1529 046a CF91      		pop r28
 1530 046c 1F91      		pop r17
 1531               	.LVL155:
 1532 046e 0F91      		pop r16
 1533 0470 FF90      		pop r15
 1534               	.LVL156:
 1535 0472 EF90      		pop r14
 1536 0474 DF90      		pop r13
 1537 0476 CF90      		pop r12
 1538               	.LVL157:
 256:../tmk_core/common/action.c ****                     }
 1539               		.loc 1 256 0
 1540 0478 0C94 0000 		jmp unregister_mods
 1541               	.LVL158:
 1542               	.L124:
 261:../tmk_core/common/action.c ****                         if (tap_count < TAPPING_TOGGLE) {
 1543               		.loc 1 261 0
 1544 047c FF20      		tst r15
 1545 047e 01F0      		breq .L131
 262:../tmk_core/common/action.c ****                             layer_invert(action.layer_tap.val);
 1546               		.loc 1 262 0
 1547 0480 2530      		cpi r18,lo8(5)
 1548 0482 00F0      		brlo .+2
 1549 0484 00C0      		rjmp .L71
 1550               	.L132:
 263:../tmk_core/common/action.c ****                         }
 1551               		.loc 1 263 0
 1552 0486 802F      		mov r24,r16
 1553 0488 8F71      		andi r24,lo8(31)
 1554               	/* epilogue start */
 346:../tmk_core/common/action.c **** 
 1555               		.loc 1 346 0
 1556 048a 2696      		adiw r28,6
 1557 048c 0FB6      		in __tmp_reg__,__SREG__
 1558 048e F894      		cli
 1559 0490 DEBF      		out __SP_H__,r29
 1560 0492 0FBE      		out __SREG__,__tmp_reg__
 1561 0494 CDBF      		out __SP_L__,r28
 1562 0496 DF91      		pop r29
 1563 0498 CF91      		pop r28
 1564 049a 1F91      		pop r17
 1565               	.LVL159:
 1566 049c 0F91      		pop r16
 1567 049e FF90      		pop r15
 1568               	.LVL160:
 1569 04a0 EF90      		pop r14
 1570 04a2 DF90      		pop r13
 1571 04a4 CF90      		pop r12
 1572               	.LVL161:
 263:../tmk_core/common/action.c ****                         }
 1573               		.loc 1 263 0
 1574 04a6 0C94 0000 		jmp layer_invert
 1575               	.LVL162:
 1576               	.L131:
 266:../tmk_core/common/action.c ****                             layer_invert(action.layer_tap.val);
 1577               		.loc 1 266 0
 1578 04aa 2630      		cpi r18,lo8(6)
 1579 04ac 00F0      		brlo .+2
 1580 04ae 00C0      		rjmp .L71
 1581 04b0 00C0      		rjmp .L132
 1582               	.L128:
 272:../tmk_core/common/action.c ****                                     layer_off(action.layer_tap.val);
 1583               		.loc 1 272 0
 1584 04b2 FF20      		tst r15
 1585 04b4 01F0      		breq .L133
 1586               	.L134:
 272:../tmk_core/common/action.c ****                                     layer_off(action.layer_tap.val);
 1587               		.loc 1 272 0 is_stmt 0 discriminator 1
 1588 04b6 802F      		mov r24,r16
 1589 04b8 8F71      		andi r24,lo8(31)
 1590               	/* epilogue start */
 346:../tmk_core/common/action.c **** 
 1591               		.loc 1 346 0 is_stmt 1 discriminator 1
 1592 04ba 2696      		adiw r28,6
 1593 04bc 0FB6      		in __tmp_reg__,__SREG__
 1594 04be F894      		cli
 1595 04c0 DEBF      		out __SP_H__,r29
 1596 04c2 0FBE      		out __SREG__,__tmp_reg__
 1597 04c4 CDBF      		out __SP_L__,r28
 1598 04c6 DF91      		pop r29
 1599 04c8 CF91      		pop r28
 1600 04ca 1F91      		pop r17
 1601               	.LVL163:
 1602 04cc 0F91      		pop r16
 1603 04ce FF90      		pop r15
 1604               	.LVL164:
 1605 04d0 EF90      		pop r14
 1606 04d2 DF90      		pop r13
 1607 04d4 CF90      		pop r12
 1608               	.LVL165:
 272:../tmk_core/common/action.c ****                                     layer_off(action.layer_tap.val);
 1609               		.loc 1 272 0 discriminator 1
 1610 04d6 0C94 0000 		jmp layer_on
 1611               	.LVL166:
 1612               	.L127:
 276:../tmk_core/common/action.c ****                                     layer_on(action.layer_tap.val);
 1613               		.loc 1 276 0
 1614 04da FF20      		tst r15
 1615 04dc 01F0      		breq .L134
 1616               	.L133:
 273:../tmk_core/common/action.c ****                     break;
 1617               		.loc 1 273 0
 1618 04de 802F      		mov r24,r16
 1619 04e0 8F71      		andi r24,lo8(31)
 1620               	/* epilogue start */
 346:../tmk_core/common/action.c **** 
 1621               		.loc 1 346 0
 1622 04e2 2696      		adiw r28,6
 1623 04e4 0FB6      		in __tmp_reg__,__SREG__
 1624 04e6 F894      		cli
 1625 04e8 DEBF      		out __SP_H__,r29
 1626 04ea 0FBE      		out __SREG__,__tmp_reg__
 1627 04ec CDBF      		out __SP_L__,r28
 1628 04ee DF91      		pop r29
 1629 04f0 CF91      		pop r28
 1630 04f2 1F91      		pop r17
 1631               	.LVL167:
 1632 04f4 0F91      		pop r16
 1633 04f6 FF90      		pop r15
 1634               	.LVL168:
 1635 04f8 EF90      		pop r14
 1636 04fa DF90      		pop r13
 1637 04fc CF90      		pop r12
 1638               	.LVL169:
 273:../tmk_core/common/action.c ****                     break;
 1639               		.loc 1 273 0
 1640 04fe 0C94 0000 		jmp layer_off
 1641               	.LVL170:
 1642               	.L129:
 280:../tmk_core/common/action.c ****                                     layer_clear();
 1643               		.loc 1 280 0
 1644 0502 FF20      		tst r15
 1645 0504 01F0      		breq .L135
 280:../tmk_core/common/action.c ****                                     layer_clear();
 1646               		.loc 1 280 0 is_stmt 0 discriminator 1
 1647 0506 802F      		mov r24,r16
 1648 0508 8F71      		andi r24,lo8(31)
 1649               	/* epilogue start */
 346:../tmk_core/common/action.c **** 
 1650               		.loc 1 346 0 is_stmt 1 discriminator 1
 1651 050a 2696      		adiw r28,6
 1652 050c 0FB6      		in __tmp_reg__,__SREG__
 1653 050e F894      		cli
 1654 0510 DEBF      		out __SP_H__,r29
 1655 0512 0FBE      		out __SREG__,__tmp_reg__
 1656 0514 CDBF      		out __SP_L__,r28
 1657 0516 DF91      		pop r29
 1658 0518 CF91      		pop r28
 1659 051a 1F91      		pop r17
 1660               	.LVL171:
 1661 051c 0F91      		pop r16
 1662 051e FF90      		pop r15
 1663               	.LVL172:
 1664 0520 EF90      		pop r14
 1665 0522 DF90      		pop r13
 1666 0524 CF90      		pop r12
 1667               	.LVL173:
 280:../tmk_core/common/action.c ****                                     layer_clear();
 1668               		.loc 1 280 0 discriminator 1
 1669 0526 0C94 0000 		jmp layer_move
 1670               	.LVL174:
 1671               	.L135:
 1672               	/* epilogue start */
 346:../tmk_core/common/action.c **** 
 1673               		.loc 1 346 0
 1674 052a 2696      		adiw r28,6
 1675 052c 0FB6      		in __tmp_reg__,__SREG__
 1676 052e F894      		cli
 1677 0530 DEBF      		out __SP_H__,r29
 1678 0532 0FBE      		out __SREG__,__tmp_reg__
 1679 0534 CDBF      		out __SP_L__,r28
 1680 0536 DF91      		pop r29
 1681 0538 CF91      		pop r28
 1682 053a 1F91      		pop r17
 1683               	.LVL175:
 1684 053c 0F91      		pop r16
 1685 053e FF90      		pop r15
 1686               	.LVL176:
 1687 0540 EF90      		pop r14
 1688 0542 DF90      		pop r13
 1689 0544 CF90      		pop r12
 1690               	.LVL177:
 281:../tmk_core/common/action.c ****                     break;
 1691               		.loc 1 281 0
 1692 0546 0C94 0000 		jmp layer_clear
 1693               	.LVL178:
 1694               	.L123:
 285:../tmk_core/common/action.c ****                         if (tap_count > 0) {
 1695               		.loc 1 285 0
 1696 054a FF20      		tst r15
 1697 054c 01F0      		breq .L136
 286:../tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: Tap: register_code\n");
 1698               		.loc 1 286 0
 1699 054e 2223      		tst r18
 1700 0550 01F4      		brne .+2
 1701 0552 00C0      		rjmp .L134
 1702               	.L170:
 288:../tmk_core/common/action.c ****                         } else {
 1703               		.loc 1 288 0
 1704 0554 812F      		mov r24,r17
 1705               	/* epilogue start */
 346:../tmk_core/common/action.c **** 
 1706               		.loc 1 346 0
 1707 0556 2696      		adiw r28,6
 1708 0558 0FB6      		in __tmp_reg__,__SREG__
 1709 055a F894      		cli
 1710 055c DEBF      		out __SP_H__,r29
 1711 055e 0FBE      		out __SREG__,__tmp_reg__
 1712 0560 CDBF      		out __SP_L__,r28
 1713 0562 DF91      		pop r29
 1714 0564 CF91      		pop r28
 1715 0566 1F91      		pop r17
 1716               	.LVL179:
 1717 0568 0F91      		pop r16
 1718 056a FF90      		pop r15
 1719               	.LVL180:
 1720 056c EF90      		pop r14
 1721 056e DF90      		pop r13
 1722 0570 CF90      		pop r12
 1723               	.LVL181:
 288:../tmk_core/common/action.c ****                         } else {
 1724               		.loc 1 288 0
 1725 0572 0C94 0000 		jmp register_code
 1726               	.LVL182:
 1727               	.L136:
 294:../tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: Tap: unregister_code\n");
 1728               		.loc 1 294 0
 1729 0576 2223      		tst r18
 1730 0578 01F4      		brne .+2
 1731 057a 00C0      		rjmp .L133
 1732               	.L171:
 296:../tmk_core/common/action.c ****                         } else {
 1733               		.loc 1 296 0
 1734 057c 812F      		mov r24,r17
 1735               	/* epilogue start */
 346:../tmk_core/common/action.c **** 
 1736               		.loc 1 346 0
 1737 057e 2696      		adiw r28,6
 1738 0580 0FB6      		in __tmp_reg__,__SREG__
 1739 0582 F894      		cli
 1740 0584 DEBF      		out __SP_H__,r29
 1741 0586 0FBE      		out __SREG__,__tmp_reg__
 1742 0588 CDBF      		out __SP_L__,r28
 1743 058a DF91      		pop r29
 1744 058c CF91      		pop r28
 1745 058e 1F91      		pop r17
 1746               	.LVL183:
 1747 0590 0F91      		pop r16
 1748 0592 FF90      		pop r15
 1749               	.LVL184:
 1750 0594 EF90      		pop r14
 1751 0596 DF90      		pop r13
 1752 0598 CF90      		pop r12
 1753               	.LVL185:
 296:../tmk_core/common/action.c ****                         } else {
 1754               		.loc 1 296 0
 1755 059a 0C94 0000 		jmp unregister_code
 1756               	.LVL186:
 1757               	.L82:
 310:../tmk_core/common/action.c ****             break;
 1758               		.loc 1 310 0
 1759 059e 402F      		mov r20,r16
 1760 05a0 4F70      		andi r20,lo8(15)
 1761               	.LVL187:
 1762 05a2 612F      		mov r22,r17
 1763 05a4 C601      		movw r24,r12
 1764 05a6 0E94 0000 		call action_get_macro
 1765               	.LVL188:
 1766               	/* epilogue start */
 346:../tmk_core/common/action.c **** 
 1767               		.loc 1 346 0
 1768 05aa 2696      		adiw r28,6
 1769 05ac 0FB6      		in __tmp_reg__,__SREG__
 1770 05ae F894      		cli
 1771 05b0 DEBF      		out __SP_H__,r29
 1772 05b2 0FBE      		out __SREG__,__tmp_reg__
 1773 05b4 CDBF      		out __SP_L__,r28
 1774 05b6 DF91      		pop r29
 1775 05b8 CF91      		pop r28
 1776 05ba 1F91      		pop r17
 1777               	.LVL189:
 1778 05bc 0F91      		pop r16
 1779 05be FF90      		pop r15
 1780               	.LVL190:
 1781 05c0 EF90      		pop r14
 1782 05c2 DF90      		pop r13
 1783 05c4 CF90      		pop r12
 1784               	.LVL191:
 310:../tmk_core/common/action.c ****             break;
 1785               		.loc 1 310 0
 1786 05c6 0C94 0000 		jmp action_macro_play
 1787               	.LVL192:
 1788               	.L83:
 340:../tmk_core/common/action.c ****             break;
 1789               		.loc 1 340 0
 1790 05ca 402F      		mov r20,r16
 1791 05cc 4F70      		andi r20,lo8(15)
 1792               	.LVL193:
 1793 05ce 612F      		mov r22,r17
 1794 05d0 C601      		movw r24,r12
 1795               	/* epilogue start */
 346:../tmk_core/common/action.c **** 
 1796               		.loc 1 346 0
 1797 05d2 2696      		adiw r28,6
 1798 05d4 0FB6      		in __tmp_reg__,__SREG__
 1799 05d6 F894      		cli
 1800 05d8 DEBF      		out __SP_H__,r29
 1801 05da 0FBE      		out __SREG__,__tmp_reg__
 1802 05dc CDBF      		out __SP_L__,r28
 1803 05de DF91      		pop r29
 1804 05e0 CF91      		pop r28
 1805 05e2 1F91      		pop r17
 1806               	.LVL194:
 1807 05e4 0F91      		pop r16
 1808 05e6 FF90      		pop r15
 1809               	.LVL195:
 1810 05e8 EF90      		pop r14
 1811 05ea DF90      		pop r13
 1812 05ec CF90      		pop r12
 1813               	.LVL196:
 340:../tmk_core/common/action.c ****             break;
 1814               		.loc 1 340 0
 1815 05ee 0C94 0000 		jmp action_function
 1816               	.LVL197:
 1817               	.L71:
 1818               	/* epilogue start */
 346:../tmk_core/common/action.c **** 
 1819               		.loc 1 346 0
 1820 05f2 2696      		adiw r28,6
 1821 05f4 0FB6      		in __tmp_reg__,__SREG__
 1822 05f6 F894      		cli
 1823 05f8 DEBF      		out __SP_H__,r29
 1824 05fa 0FBE      		out __SREG__,__tmp_reg__
 1825 05fc CDBF      		out __SP_L__,r28
 1826 05fe DF91      		pop r29
 1827 0600 CF91      		pop r28
 1828 0602 1F91      		pop r17
 1829               	.LVL198:
 1830 0604 0F91      		pop r16
 1831 0606 FF90      		pop r15
 1832               	.LVL199:
 1833 0608 EF90      		pop r14
 1834 060a DF90      		pop r13
 1835 060c CF90      		pop r12
 1836 060e 0895      		ret
 1837               		.cfi_endproc
 1838               	.LFE104:
 1840               		.section	.text.clear_keyboard_but_mods,"ax",@progbits
 1841               	.global	clear_keyboard_but_mods
 1843               	clear_keyboard_but_mods:
 1844               	.LFB110:
 497:../tmk_core/common/action.c ****     }
 498:../tmk_core/common/action.c **** }
 499:../tmk_core/common/action.c **** 
 500:../tmk_core/common/action.c **** void clear_keyboard(void)
 501:../tmk_core/common/action.c **** {
 502:../tmk_core/common/action.c ****     clear_mods();
 503:../tmk_core/common/action.c ****     clear_keyboard_but_mods();
 504:../tmk_core/common/action.c **** }
 505:../tmk_core/common/action.c **** 
 506:../tmk_core/common/action.c **** void clear_keyboard_but_mods(void)
 507:../tmk_core/common/action.c **** {
 1845               		.loc 1 507 0
 1846               		.cfi_startproc
 1847               	/* prologue: function */
 1848               	/* frame size = 0 */
 1849               	/* stack size = 0 */
 1850               	.L__stack_usage = 0
 508:../tmk_core/common/action.c ****     clear_weak_mods();
 1851               		.loc 1 508 0
 1852 0000 0E94 0000 		call clear_weak_mods
 1853               	.LVL200:
 509:../tmk_core/common/action.c ****     clear_keys();
 1854               		.loc 1 509 0
 1855 0004 0E94 0000 		call clear_keys
 1856               	.LVL201:
 510:../tmk_core/common/action.c ****     send_keyboard_report();
 1857               		.loc 1 510 0
 1858 0008 0E94 0000 		call send_keyboard_report
 1859               	.LVL202:
 511:../tmk_core/common/action.c **** #ifdef MOUSEKEY_ENABLE
 512:../tmk_core/common/action.c ****     mousekey_clear();
 1860               		.loc 1 512 0
 1861 000c 0E94 0000 		call mousekey_clear
 1862               	.LVL203:
 513:../tmk_core/common/action.c ****     mousekey_send();
 1863               		.loc 1 513 0
 1864 0010 0E94 0000 		call mousekey_send
 1865               	.LVL204:
 514:../tmk_core/common/action.c **** #endif
 515:../tmk_core/common/action.c **** #ifdef EXTRAKEY_ENABLE
 516:../tmk_core/common/action.c ****     host_system_send(0);
 1866               		.loc 1 516 0
 1867 0014 80E0      		ldi r24,0
 1868 0016 90E0      		ldi r25,0
 1869 0018 0E94 0000 		call host_system_send
 1870               	.LVL205:
 517:../tmk_core/common/action.c ****     host_consumer_send(0);
 1871               		.loc 1 517 0
 1872 001c 80E0      		ldi r24,0
 1873 001e 90E0      		ldi r25,0
 1874 0020 0C94 0000 		jmp host_consumer_send
 1875               	.LVL206:
 1876               		.cfi_endproc
 1877               	.LFE110:
 1879               		.section	.text.clear_keyboard,"ax",@progbits
 1880               	.global	clear_keyboard
 1882               	clear_keyboard:
 1883               	.LFB109:
 501:../tmk_core/common/action.c ****     clear_mods();
 1884               		.loc 1 501 0
 1885               		.cfi_startproc
 1886               	/* prologue: function */
 1887               	/* frame size = 0 */
 1888               	/* stack size = 0 */
 1889               	.L__stack_usage = 0
 502:../tmk_core/common/action.c ****     clear_keyboard_but_mods();
 1890               		.loc 1 502 0
 1891 0000 0E94 0000 		call clear_mods
 1892               	.LVL207:
 503:../tmk_core/common/action.c **** }
 1893               		.loc 1 503 0
 1894 0004 0C94 0000 		jmp clear_keyboard_but_mods
 1895               	.LVL208:
 1896               		.cfi_endproc
 1897               	.LFE109:
 1899               		.section	.text.is_tap_key,"ax",@progbits
 1900               	.global	is_tap_key
 1902               	is_tap_key:
 1903               	.LFB111:
 518:../tmk_core/common/action.c **** #endif
 519:../tmk_core/common/action.c **** }
 520:../tmk_core/common/action.c **** 
 521:../tmk_core/common/action.c **** bool is_tap_key(keypos_t key)
 522:../tmk_core/common/action.c **** {
 1904               		.loc 1 522 0
 1905               		.cfi_startproc
 1906               	.LVL209:
 1907               	/* prologue: function */
 1908               	/* frame size = 0 */
 1909               	/* stack size = 0 */
 1910               	.L__stack_usage = 0
 523:../tmk_core/common/action.c ****     action_t action = layer_switch_get_action(key);
 1911               		.loc 1 523 0
 1912 0000 0E94 0000 		call layer_switch_get_action
 1913               	.LVL210:
 524:../tmk_core/common/action.c **** 
 525:../tmk_core/common/action.c ****     switch (action.kind.id) {
 1914               		.loc 1 525 0
 1915 0004 292F      		mov r18,r25
 1916 0006 2295      		swap r18
 1917 0008 2F70      		andi r18,lo8(15)
 1918 000a 30E0      		ldi r19,0
 1919 000c 2C30      		cpi r18,12
 1920 000e 3105      		cpc r19,__zero_reg__
 1921 0010 04F4      		brge .L184
 1922 0012 2A30      		cpi r18,10
 1923 0014 3105      		cpc r19,__zero_reg__
 1924 0016 04F4      		brge .L185
 1925 0018 2250      		subi r18,2
 1926 001a 3109      		sbc r19,__zero_reg__
 1927 001c 2230      		cpi r18,2
 1928 001e 3105      		cpc r19,__zero_reg__
 1929 0020 00F4      		brsh .L188
 1930 0022 00C0      		rjmp .L185
 1931               	.L184:
 1932 0024 2C30      		cpi r18,12
 1933 0026 3105      		cpc r19,__zero_reg__
 1934 0028 01F0      		breq .L186
 1935 002a 2F30      		cpi r18,15
 1936 002c 3105      		cpc r19,__zero_reg__
 1937 002e 01F0      		breq .L186
 1938 0030 00C0      		rjmp .L188
 1939               	.L185:
 1940               	.LVL211:
 526:../tmk_core/common/action.c ****         case ACT_LMODS_TAP:
 527:../tmk_core/common/action.c ****         case ACT_RMODS_TAP:
 528:../tmk_core/common/action.c ****         case ACT_LAYER_TAP:
 529:../tmk_core/common/action.c ****         case ACT_LAYER_TAP_EXT:
 530:../tmk_core/common/action.c ****             switch (action.layer_tap.code) {
 1941               		.loc 1 530 0
 1942 0032 803E      		cpi r24,lo8(-32)
 1943 0034 00F0      		brlo .L189
 1944 0036 803F      		cpi r24,lo8(-16)
 1945 0038 01F4      		brne .L188
 1946 003a 00C0      		rjmp .L189
 1947               	.LVL212:
 1948               	.L186:
 531:../tmk_core/common/action.c ****                 case 0x00 ... 0xdf:
 532:../tmk_core/common/action.c ****                 case OP_TAP_TOGGLE:
 533:../tmk_core/common/action.c ****                     return true;
 534:../tmk_core/common/action.c ****             }
 535:../tmk_core/common/action.c ****             return false;
 536:../tmk_core/common/action.c ****         case ACT_MACRO:
 537:../tmk_core/common/action.c ****         case ACT_FUNCTION:
 538:../tmk_core/common/action.c ****             if (action.func.opt & FUNC_TAP) { return true; }
 1949               		.loc 1 538 0
 1950 003c 93FB      		bst r25,3
 1951 003e 8827      		clr r24
 1952 0040 80F9      		bld r24,0
 1953 0042 0895      		ret
 1954               	.LVL213:
 1955               	.L188:
 539:../tmk_core/common/action.c ****             return false;
 540:../tmk_core/common/action.c ****     }
 541:../tmk_core/common/action.c ****     return false;
 1956               		.loc 1 541 0
 1957 0044 80E0      		ldi r24,0
 1958               	.LVL214:
 1959 0046 0895      		ret
 1960               	.LVL215:
 1961               	.L189:
 533:../tmk_core/common/action.c ****             }
 1962               		.loc 1 533 0
 1963 0048 81E0      		ldi r24,lo8(1)
 1964               	.LVL216:
 542:../tmk_core/common/action.c **** }
 1965               		.loc 1 542 0
 1966 004a 0895      		ret
 1967               		.cfi_endproc
 1968               	.LFE111:
 1970               		.section	.text.debug_event,"ax",@progbits
 1971               	.global	debug_event
 1973               	debug_event:
 1974               	.LFB112:
 543:../tmk_core/common/action.c **** 
 544:../tmk_core/common/action.c **** 
 545:../tmk_core/common/action.c **** /*
 546:../tmk_core/common/action.c ****  * debug print
 547:../tmk_core/common/action.c ****  */
 548:../tmk_core/common/action.c **** void debug_event(keyevent_t event)
 549:../tmk_core/common/action.c **** {
 1975               		.loc 1 549 0
 1976               		.cfi_startproc
 1977 0000 CF93      		push r28
 1978               	.LCFI15:
 1979               		.cfi_def_cfa_offset 3
 1980               		.cfi_offset 28, -2
 1981 0002 DF93      		push r29
 1982               	.LCFI16:
 1983               		.cfi_def_cfa_offset 4
 1984               		.cfi_offset 29, -3
 1985 0004 00D0      		rcall .
 1986 0006 00D0      		rcall .
 1987 0008 1F92      		push __zero_reg__
 1988               	.LCFI17:
 1989               		.cfi_def_cfa_offset 9
 1990 000a CDB7      		in r28,__SP_L__
 1991 000c DEB7      		in r29,__SP_H__
 1992               	.LCFI18:
 1993               		.cfi_def_cfa_register 28
 1994               	/* prologue: function */
 1995               	/* frame size = 5 */
 1996               	/* stack size = 7 */
 1997               	.L__stack_usage = 7
 1998               	/* epilogue start */
 550:../tmk_core/common/action.c ****     dprintf("%04X%c(%u)", (event.key.row<<8 | event.key.col), (event.pressed ? 'd' : 'u'), event.ti
 551:../tmk_core/common/action.c **** }
 1999               		.loc 1 551 0
 2000 000e 0F90      		pop __tmp_reg__
 2001 0010 0F90      		pop __tmp_reg__
 2002 0012 0F90      		pop __tmp_reg__
 2003 0014 0F90      		pop __tmp_reg__
 2004 0016 0F90      		pop __tmp_reg__
 2005 0018 DF91      		pop r29
 2006 001a CF91      		pop r28
 2007 001c 0895      		ret
 2008               		.cfi_endproc
 2009               	.LFE112:
 2011               		.section	.text.debug_record,"ax",@progbits
 2012               	.global	debug_record
 2014               	debug_record:
 2015               	.LFB113:
 552:../tmk_core/common/action.c **** 
 553:../tmk_core/common/action.c **** void debug_record(keyrecord_t record)
 554:../tmk_core/common/action.c **** {
 2016               		.loc 1 554 0
 2017               		.cfi_startproc
 2018 0000 CF93      		push r28
 2019               	.LCFI19:
 2020               		.cfi_def_cfa_offset 3
 2021               		.cfi_offset 28, -2
 2022 0002 DF93      		push r29
 2023               	.LCFI20:
 2024               		.cfi_def_cfa_offset 4
 2025               		.cfi_offset 29, -3
 2026 0004 00D0      		rcall .
 2027 0006 00D0      		rcall .
 2028 0008 00D0      		rcall .
 2029               	.LCFI21:
 2030               		.cfi_def_cfa_offset 10
 2031 000a CDB7      		in r28,__SP_L__
 2032 000c DEB7      		in r29,__SP_H__
 2033               	.LCFI22:
 2034               		.cfi_def_cfa_register 28
 2035               	/* prologue: function */
 2036               	/* frame size = 6 */
 2037               	/* stack size = 8 */
 2038               	.L__stack_usage = 8
 2039               	/* epilogue start */
 555:../tmk_core/common/action.c ****     debug_event(record.event);
 556:../tmk_core/common/action.c **** #ifndef NO_ACTION_TAPPING
 557:../tmk_core/common/action.c ****     dprintf(":%u%c", record.tap.count, (record.tap.interrupted ? '-' : ' '));
 558:../tmk_core/common/action.c **** #endif
 559:../tmk_core/common/action.c **** }
 2040               		.loc 1 559 0
 2041 000e 2696      		adiw r28,6
 2042 0010 0FB6      		in __tmp_reg__,__SREG__
 2043 0012 F894      		cli
 2044 0014 DEBF      		out __SP_H__,r29
 2045 0016 0FBE      		out __SREG__,__tmp_reg__
 2046 0018 CDBF      		out __SP_L__,r28
 2047 001a DF91      		pop r29
 2048 001c CF91      		pop r28
 2049 001e 0895      		ret
 2050               		.cfi_endproc
 2051               	.LFE113:
 2053               		.section	.text.debug_action,"ax",@progbits
 2054               	.global	debug_action
 2056               	debug_action:
 2057               	.LFB114:
 560:../tmk_core/common/action.c **** 
 561:../tmk_core/common/action.c **** void debug_action(action_t action)
 562:../tmk_core/common/action.c **** {
 2058               		.loc 1 562 0
 2059               		.cfi_startproc
 2060               	.LVL217:
 2061               	/* prologue: function */
 2062               	/* frame size = 0 */
 2063               	/* stack size = 0 */
 2064               	.L__stack_usage = 0
 2065 0000 0895      		ret
 2066               		.cfi_endproc
 2067               	.LFE114:
 2069               		.text
 2070               	.Letext0:
 2071               		.file 3 "/usr/local/Cellar/avr-gcc/4.9.3/avr/include/stdint.h"
 2072               		.file 4 "../tmk_core/common/keycode.h"
 2073               		.file 5 "../tmk_core/common/action_code.h"
 2074               		.file 6 "../tmk_core/common/action_macro.h"
 2075               		.file 7 "../tmk_core/common/action.h"
 2076               		.file 8 "../tmk_core/common/action_tapping.h"
 2077               		.file 9 "../tmk_core/common/hook.h"
 2078               		.file 10 "../tmk_core/common/action_util.h"
 2079               		.file 11 "../tmk_core/common/host.h"
 2080               		.file 12 "../tmk_core/common/action_layer.h"
 2081               		.file 13 "../tmk_core/common/command.h"
 2082               		.file 14 "../tmk_core/common/mousekey.h"
 2083               		.file 15 "../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/USBTask.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 action.c
/var/folders/w_/62ddyc51061dt7n8j2r43p_c0000gn/T//ccqbFsas.s:2      *ABS*:000000000000003e __SP_H__
/var/folders/w_/62ddyc51061dt7n8j2r43p_c0000gn/T//ccqbFsas.s:3      *ABS*:000000000000003d __SP_L__
/var/folders/w_/62ddyc51061dt7n8j2r43p_c0000gn/T//ccqbFsas.s:4      *ABS*:000000000000003f __SREG__
/var/folders/w_/62ddyc51061dt7n8j2r43p_c0000gn/T//ccqbFsas.s:5      *ABS*:0000000000000000 __tmp_reg__
/var/folders/w_/62ddyc51061dt7n8j2r43p_c0000gn/T//ccqbFsas.s:6      *ABS*:0000000000000001 __zero_reg__
/var/folders/w_/62ddyc51061dt7n8j2r43p_c0000gn/T//ccqbFsas.s:13     .text.action_exec:0000000000000000 action_exec
/var/folders/w_/62ddyc51061dt7n8j2r43p_c0000gn/T//ccqbFsas.s:122    .text.register_code:0000000000000000 register_code
/var/folders/w_/62ddyc51061dt7n8j2r43p_c0000gn/T//ccqbFsas.s:453    .text.unregister_code:0000000000000000 unregister_code
/var/folders/w_/62ddyc51061dt7n8j2r43p_c0000gn/T//ccqbFsas.s:588    .text.register_mods:0000000000000000 register_mods
/var/folders/w_/62ddyc51061dt7n8j2r43p_c0000gn/T//ccqbFsas.s:614    .text.unregister_mods:0000000000000000 unregister_mods
/var/folders/w_/62ddyc51061dt7n8j2r43p_c0000gn/T//ccqbFsas.s:640    .text.process_action:0000000000000000 process_action
/var/folders/w_/62ddyc51061dt7n8j2r43p_c0000gn/T//ccqbFsas.s:1843   .text.clear_keyboard_but_mods:0000000000000000 clear_keyboard_but_mods
/var/folders/w_/62ddyc51061dt7n8j2r43p_c0000gn/T//ccqbFsas.s:1882   .text.clear_keyboard:0000000000000000 clear_keyboard
/var/folders/w_/62ddyc51061dt7n8j2r43p_c0000gn/T//ccqbFsas.s:1902   .text.is_tap_key:0000000000000000 is_tap_key
/var/folders/w_/62ddyc51061dt7n8j2r43p_c0000gn/T//ccqbFsas.s:1973   .text.debug_event:0000000000000000 debug_event
/var/folders/w_/62ddyc51061dt7n8j2r43p_c0000gn/T//ccqbFsas.s:2014   .text.debug_record:0000000000000000 debug_record
/var/folders/w_/62ddyc51061dt7n8j2r43p_c0000gn/T//ccqbFsas.s:2056   .text.debug_action:0000000000000000 debug_action

UNDEFINED SYMBOLS
action_tapping_process
hook_matrix_change
host_keyboard_leds
add_key
send_keyboard_report
del_key
command_proc
add_mods
host_system_send
host_consumer_send
del_mods
layer_switch_get_action
layer_debug
default_layer_debug
__tablejump2__
add_weak_mods
del_weak_mods
set_oneshot_mods
clear_oneshot_mods
get_mods
mousekey_on
mousekey_off
mousekey_send
default_layer_and
default_layer_xor
default_layer_or
layer_and
layer_xor
layer_or
layer_on
layer_off
layer_invert
layer_move
layer_clear
action_get_macro
action_macro_play
action_function
clear_weak_mods
clear_keys
mousekey_clear
clear_mods
